
final_project_mcu1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00800060  00003510  000035a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008001ee  008001ee  00003732  2**0
                  ALLOC
  3 .stab         00002e8c  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003598  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e854  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ea14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ed0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_7>
      20:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_8>
      24:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 14 	call	0x291c	; 0x291c <main>
      8a:	0c 94 86 1a 	jmp	0x350c	; 0x350c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ee       	ldi	r22, 0xE0	; 224
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 51       	subi	r30, 0x18	; 24
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
#endif
/**************************************************************************
 *                       Functions definition
 * ***********************************************************************/

void UART_init(UART_configType* configurations){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03

	/* DO NOT ACCESS (URSEL) BIT UNDER ANY CONDITION */

	uint16 ubrr_value;

	UCSRA_R.bit.U2X_bit = 1; /* Double speed */
     e3e:	eb e2       	ldi	r30, 0x2B	; 43
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
#ifdef INTERRUPT
	UCSRB_R.bit.RXCIE_bit = 1; /* Receive Complete interrupt enable */
#endif
	UCSRB_R.bit.RXEN_bit = 1; /* Receiver enable */
     e48:	ea e2       	ldi	r30, 0x2A	; 42
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	80 83       	st	Z, r24

	UCSRB_R.bit.TXEN_bit = 1; /* Transmitter enable */
     e52:	ea e2       	ldi	r30, 0x2A	; 42
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 60       	ori	r24, 0x08	; 8
     e5a:	80 83       	st	Z, r24

	UCSRC_R.bit.UMSEL_bit = 0; /* Asynchronous */
     e5c:	e0 e4       	ldi	r30, 0x40	; 64
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 7b       	andi	r24, 0xBF	; 191
     e64:	80 83       	st	Z, r24

	UCSRC_R.bit.UPM_bit = configurations->parity; /* Select parity-bit mode */
     e66:	a0 e4       	ldi	r26, 0x40	; 64
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb 81       	ldd	r30, Y+3	; 0x03
     e6c:	fc 81       	ldd	r31, Y+4	; 0x04
     e6e:	81 81       	ldd	r24, Z+1	; 0x01
     e70:	83 70       	andi	r24, 0x03	; 3
     e72:	83 70       	andi	r24, 0x03	; 3
     e74:	98 2f       	mov	r25, r24
     e76:	92 95       	swap	r25
     e78:	90 7f       	andi	r25, 0xF0	; 240
     e7a:	8c 91       	ld	r24, X
     e7c:	8f 7c       	andi	r24, 0xCF	; 207
     e7e:	89 2b       	or	r24, r25
     e80:	8c 93       	st	X, r24

	UCSRC_R.bit.USBS_bit = configurations->stop; /* Select stop_bit mode */
     e82:	a0 e4       	ldi	r26, 0x40	; 64
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	eb 81       	ldd	r30, Y+3	; 0x03
     e88:	fc 81       	ldd	r31, Y+4	; 0x04
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	98 2f       	mov	r25, r24
     e92:	99 0f       	add	r25, r25
     e94:	99 0f       	add	r25, r25
     e96:	99 0f       	add	r25, r25
     e98:	8c 91       	ld	r24, X
     e9a:	87 7f       	andi	r24, 0xF7	; 247
     e9c:	89 2b       	or	r24, r25
     e9e:	8c 93       	st	X, r24

	UCSRC_R.bit.UCSZ_bit = configurations->bit_data; /* select number of data bits */
     ea0:	a0 e4       	ldi	r26, 0x40	; 64
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb 81       	ldd	r30, Y+3	; 0x03
     ea6:	fc 81       	ldd	r31, Y+4	; 0x04
     ea8:	80 81       	ld	r24, Z
     eaa:	83 70       	andi	r24, 0x03	; 3
     eac:	83 70       	andi	r24, 0x03	; 3
     eae:	98 2f       	mov	r25, r24
     eb0:	99 0f       	add	r25, r25
     eb2:	8c 91       	ld	r24, X
     eb4:	89 7f       	andi	r24, 0xF9	; 249
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24

	ubrr_value =  (uint16)(((float) F_CPU/((uint32)8 * (configurations->baudRate)))-1);
     eba:	eb 81       	ldd	r30, Y+3	; 0x03
     ebc:	fc 81       	ldd	r31, Y+4	; 0x04
     ebe:	83 81       	ldd	r24, Z+3	; 0x03
     ec0:	94 81       	ldd	r25, Z+4	; 0x04
     ec2:	cc 01       	movw	r24, r24
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	aa 1f       	adc	r26, r26
     ece:	bb 1f       	adc	r27, r27
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	aa 1f       	adc	r26, r26
     ed6:	bb 1f       	adc	r27, r27
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	aa 1f       	adc	r26, r26
     ede:	bb 1f       	adc	r27, r27
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ee8:	9b 01       	movw	r18, r22
     eea:	ac 01       	movw	r20, r24
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	74 e2       	ldi	r23, 0x24	; 36
     ef0:	84 ef       	ldi	r24, 0xF4	; 244
     ef2:	9a e4       	ldi	r25, 0x4A	; 74
     ef4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e8       	ldi	r20, 0x80	; 128
     f06:	5f e3       	ldi	r21, 0x3F	; 63
     f08:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH_R.bit.UBRR_bit = ubrr_value>>8;
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	89 2f       	mov	r24, r25
     f2a:	99 27       	eor	r25, r25
     f2c:	8f 70       	andi	r24, 0x0F	; 15
     f2e:	98 2f       	mov	r25, r24
     f30:	9f 70       	andi	r25, 0x0F	; 15
     f32:	80 81       	ld	r24, Z
     f34:	80 7f       	andi	r24, 0xF0	; 240
     f36:	89 2b       	or	r24, r25
     f38:	80 83       	st	Z, r24

	UBRRL_R = ubrr_value;
     f3a:	e9 e2       	ldi	r30, 0x29	; 41
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	80 83       	st	Z, r24
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <UART_sendByte>:


void UART_sendByte(const uint8 data){
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	89 83       	std	Y+1, r24	; 0x01

	/* Stuck in loop till the data register is empty */
	while(UCSRA_R.bit.UDRE_bit == 0);
     f5c:	eb e2       	ldi	r30, 0x2B	; 43
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 72       	andi	r24, 0x20	; 32
     f64:	88 23       	and	r24, r24
     f66:	d1 f3       	breq	.-12     	; 0xf5c <UART_sendByte+0xc>

	/* As data register is empty i can send a byte */
	UDR_R = data;
     f68:	ec e2       	ldi	r30, 0x2C	; 44
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	80 83       	st	Z, r24
}
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <UART_receiveByte>:

uint8 UART_receiveByte(void){
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62

#ifdef POLLING
	while(UCSRA_R.bit.RXC_bit == 0);
     f80:	eb e2       	ldi	r30, 0x2B	; 43
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 78       	andi	r24, 0x80	; 128
     f88:	88 23       	and	r24, r24
     f8a:	d1 f3       	breq	.-12     	; 0xf80 <UART_receiveByte+0x8>

	return UDR_R;
     f8c:	ec e2       	ldi	r30, 0x2C	; 44
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
#endif

#ifdef INTERRUPT
	return g_receivedByte;
#endif
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <UART_sendString>:

void UART_sendString(const uint8 *str){
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <UART_sendString+0x6>
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9b 83       	std	Y+3, r25	; 0x03
     fa6:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i;

	for(i=0; str[i] != '\0';i++){
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <UART_sendString+0x30>
		UART_sendByte(str[i]);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	fc 01       	movw	r30, r24
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	80 81       	ld	r24, Z
     fbe:	0e 94 a8 07 	call	0xf50	; 0xf50 <UART_sendByte>

void UART_sendString(const uint8 *str){

	uint8 i;

	for(i=0; str[i] != '\0';i++){
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	80 81       	ld	r24, Z
     fda:	88 23       	and	r24, r24
     fdc:	39 f7       	brne	.-50     	; 0xfac <UART_sendString+0x14>
		UART_sendByte(str[i]);
	}
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <UART_receiveString>:

void UART_receiveString(uint8 *str){
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <UART_receiveString+0xa>
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
     ffe:	19 82       	std	Y+1, r1	; 0x01

	str[i] = UART_receiveByte();
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	8c 01       	movw	r16, r24
    100c:	02 0f       	add	r16, r18
    100e:	13 1f       	adc	r17, r19
    1010:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_receiveByte>
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <UART_receiveString+0x4e>

	while(str[i] != '#'){

		i++;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	8c 01       	movw	r16, r24
    102c:	02 0f       	add	r16, r18
    102e:	13 1f       	adc	r17, r19
    1030:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_receiveByte>
    1034:	f8 01       	movw	r30, r16
    1036:	80 83       	st	Z, r24

	uint8 i=0;

	str[i] = UART_receiveByte();

	while(str[i] != '#'){
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	80 81       	ld	r24, Z
    104a:	83 32       	cpi	r24, 0x23	; 35
    104c:	31 f7       	brne	.-52     	; 0x101a <UART_receiveString+0x30>

		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0';
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	10 82       	st	Z, r1
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <GPIO_setupPinDirection+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <GPIO_setupPinDirection+0x8>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	6a 83       	std	Y+2, r22	; 0x02
    1082:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	88 30       	cpi	r24, 0x08	; 8
    1088:	08 f0       	brcs	.+2      	; 0x108c <GPIO_setupPinDirection+0x1c>
    108a:	d5 c0       	rjmp	.+426    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	08 f0       	brcs	.+2      	; 0x1094 <GPIO_setupPinDirection+0x24>
    1092:	d1 c0       	rjmp	.+418    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	2c 83       	std	Y+4, r18	; 0x04
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <GPIO_setupPinDirection+0x3a>
    10a8:	43 c0       	rjmp	.+134    	; 0x1130 <GPIO_setupPinDirection+0xc0>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <GPIO_setupPinDirection+0x4e>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <GPIO_setupPinDirection+0x68>
    10bc:	bc c0       	rjmp	.+376    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <GPIO_setupPinDirection+0x5a>
    10c8:	5f c0       	rjmp	.+190    	; 0x1188 <GPIO_setupPinDirection+0x118>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <GPIO_setupPinDirection+0x66>
    10d4:	85 c0       	rjmp	.+266    	; 0x11e0 <GPIO_setupPinDirection+0x170>
    10d6:	af c0       	rjmp	.+350    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10de:	aa e3       	ldi	r26, 0x3A	; 58
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ea e3       	ldi	r30, 0x3A	; 58
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_setupPinDirection+0x8c>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_setupPinDirection+0x88>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	98 c0       	rjmp	.+304    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1106:	aa e3       	ldi	r26, 0x3A	; 58
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_setupPinDirection+0xb4>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_setupPinDirection+0xb0>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	83 c0       	rjmp	.+262    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	a1 f4       	brne	.+40     	; 0x115e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1136:	a7 e3       	ldi	r26, 0x37	; 55
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e3       	ldi	r30, 0x37	; 55
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <GPIO_setupPinDirection+0xe4>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <GPIO_setupPinDirection+0xe0>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	6c c0       	rjmp	.+216    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    115e:	a7 e3       	ldi	r26, 0x37	; 55
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_setupPinDirection+0x10c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_setupPinDirection+0x108>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	57 c0       	rjmp	.+174    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    118e:	a4 e3       	ldi	r26, 0x34	; 52
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e4 e3       	ldi	r30, 0x34	; 52
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_setupPinDirection+0x13c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_setupPinDirection+0x138>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	40 c0       	rjmp	.+128    	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11b6:	a4 e3       	ldi	r26, 0x34	; 52
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e4 e3       	ldi	r30, 0x34	; 52
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_setupPinDirection+0x164>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_setupPinDirection+0x160>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	2b c0       	rjmp	.+86     	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	a1 f4       	brne	.+40     	; 0x120e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11e6:	a1 e3       	ldi	r26, 0x31	; 49
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_setupPinDirection+0x194>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_setupPinDirection+0x190>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    120e:	a1 e3       	ldi	r26, 0x31	; 49
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_setupPinDirection+0x1bc>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_setupPinDirection+0x1b8>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <GPIO_writePin+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_writePin+0x8>
    124e:	0f 92       	push	r0
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
    1258:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	08 f0       	brcs	.+2      	; 0x1262 <GPIO_writePin+0x1c>
    1260:	d5 c0       	rjmp	.+426    	; 0x140c <GPIO_writePin+0x1c6>
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	08 f0       	brcs	.+2      	; 0x126a <GPIO_writePin+0x24>
    1268:	d1 c0       	rjmp	.+418    	; 0x140c <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else{
		switch(port_num){
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3d 83       	std	Y+5, r19	; 0x05
    1272:	2c 83       	std	Y+4, r18	; 0x04
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <GPIO_writePin+0x3a>
    127e:	43 c0       	rjmp	.+134    	; 0x1306 <GPIO_writePin+0xc0>
    1280:	2c 81       	ldd	r18, Y+4	; 0x04
    1282:	3d 81       	ldd	r19, Y+5	; 0x05
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <GPIO_writePin+0x4e>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	71 f0       	breq	.+28     	; 0x12ae <GPIO_writePin+0x68>
    1292:	bc c0       	rjmp	.+376    	; 0x140c <GPIO_writePin+0x1c6>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <GPIO_writePin+0x5a>
    129e:	5f c0       	rjmp	.+190    	; 0x135e <GPIO_writePin+0x118>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <GPIO_writePin+0x66>
    12aa:	85 c0       	rjmp	.+266    	; 0x13b6 <GPIO_writePin+0x170>
    12ac:	af c0       	rjmp	.+350    	; 0x140c <GPIO_writePin+0x1c6>

		case PORTA_ID:
			if(value == HIGH){
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	a1 f4       	brne	.+40     	; 0x12dc <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    12b4:	ab e3       	ldi	r26, 0x3B	; 59
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e3       	ldi	r30, 0x3B	; 59
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_writePin+0x8c>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_writePin+0x88>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	98 c0       	rjmp	.+304    	; 0x140c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <GPIO_writePin+0xb4>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <GPIO_writePin+0xb0>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	83 c0       	rjmp	.+262    	; 0x140c <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == HIGH)
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	a1 f4       	brne	.+40     	; 0x1334 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_writePin+0xe4>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_writePin+0xe0>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	6c c0       	rjmp	.+216    	; 0x140c <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1334:	a8 e3       	ldi	r26, 0x38	; 56
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_writePin+0x10c>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_writePin+0x108>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	57 c0       	rjmp	.+174    	; 0x140c <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == HIGH)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	a1 f4       	brne	.+40     	; 0x138c <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1364:	a5 e3       	ldi	r26, 0x35	; 53
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e5 e3       	ldi	r30, 0x35	; 53
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <GPIO_writePin+0x13c>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <GPIO_writePin+0x138>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	40 c0       	rjmp	.+128    	; 0x140c <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_writePin+0x164>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_writePin+0x160>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	2b c0       	rjmp	.+86     	; 0x140c <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == HIGH)
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	a1 f4       	brne	.+40     	; 0x13e4 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    13bc:	a2 e3       	ldi	r26, 0x32	; 50
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e2 e3       	ldi	r30, 0x32	; 50
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_writePin+0x194>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_writePin+0x190>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_writePin+0x1bc>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_writePin+0x1b8>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
			break;
		}
	}
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <GPIO_readPin+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <GPIO_readPin+0x8>
    1424:	0f 92       	push	r0
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	88 30       	cpi	r24, 0x08	; 8
    1432:	18 f4       	brcc	.+6      	; 0x143a <GPIO_readPin+0x1e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	10 f0       	brcs	.+4      	; 0x143e <GPIO_readPin+0x22>
	{
		return 0;
    143a:	1d 82       	std	Y+5, r1	; 0x05
    143c:	af c0       	rjmp	.+350    	; 0x159c <GPIO_readPin+0x180>
	}

	switch(port_num){
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3c 83       	std	Y+4, r19	; 0x04
    1446:	2b 83       	std	Y+3, r18	; 0x03
    1448:	4b 81       	ldd	r20, Y+3	; 0x03
    144a:	5c 81       	ldd	r21, Y+4	; 0x04
    144c:	41 30       	cpi	r20, 0x01	; 1
    144e:	51 05       	cpc	r21, r1
    1450:	d9 f1       	breq	.+118    	; 0x14c8 <GPIO_readPin+0xac>
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	91 05       	cpc	r25, r1
    145a:	34 f4       	brge	.+12     	; 0x1468 <GPIO_readPin+0x4c>
    145c:	2b 81       	ldd	r18, Y+3	; 0x03
    145e:	3c 81       	ldd	r19, Y+4	; 0x04
    1460:	21 15       	cp	r18, r1
    1462:	31 05       	cpc	r19, r1
    1464:	71 f0       	breq	.+28     	; 0x1482 <GPIO_readPin+0x66>
    1466:	99 c0       	rjmp	.+306    	; 0x159a <GPIO_readPin+0x17e>
    1468:	4b 81       	ldd	r20, Y+3	; 0x03
    146a:	5c 81       	ldd	r21, Y+4	; 0x04
    146c:	42 30       	cpi	r20, 0x02	; 2
    146e:	51 05       	cpc	r21, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <GPIO_readPin+0x58>
    1472:	4d c0       	rjmp	.+154    	; 0x150e <GPIO_readPin+0xf2>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <GPIO_readPin+0x64>
    147e:	6a c0       	rjmp	.+212    	; 0x1554 <GPIO_readPin+0x138>
    1480:	8c c0       	rjmp	.+280    	; 0x159a <GPIO_readPin+0x17e>

	case PORTA_ID:
		if(GET_BIT(PINA,pin_num))
    1482:	e9 e3       	ldi	r30, 0x39	; 57
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_readPin+0x80>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_readPin+0x7c>
    14a0:	9a 01       	movw	r18, r20
    14a2:	28 23       	and	r18, r24
    14a4:	39 23       	and	r19, r25
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <GPIO_readPin+0x98>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <GPIO_readPin+0x94>
    14b8:	ca 01       	movw	r24, r20
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <GPIO_readPin+0xa8>
			return 1;
    14be:	51 e0       	ldi	r21, 0x01	; 1
    14c0:	5d 83       	std	Y+5, r21	; 0x05
    14c2:	6c c0       	rjmp	.+216    	; 0x159c <GPIO_readPin+0x180>
		else
			return 0;
    14c4:	1d 82       	std	Y+5, r1	; 0x05
    14c6:	6a c0       	rjmp	.+212    	; 0x159c <GPIO_readPin+0x180>
		break;

	case PORTB_ID:
		if(GET_BIT(PINB,pin_num))
    14c8:	e6 e3       	ldi	r30, 0x36	; 54
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_readPin+0xc6>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	2a 95       	dec	r18
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_readPin+0xc2>
    14e6:	9a 01       	movw	r18, r20
    14e8:	28 23       	and	r18, r24
    14ea:	39 23       	and	r19, r25
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_readPin+0xde>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_readPin+0xda>
    14fe:	ca 01       	movw	r24, r20
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	19 f0       	breq	.+6      	; 0x150a <GPIO_readPin+0xee>
			return 1;
    1504:	51 e0       	ldi	r21, 0x01	; 1
    1506:	5d 83       	std	Y+5, r21	; 0x05
    1508:	49 c0       	rjmp	.+146    	; 0x159c <GPIO_readPin+0x180>
		else
			return 0;
    150a:	1d 82       	std	Y+5, r1	; 0x05
    150c:	47 c0       	rjmp	.+142    	; 0x159c <GPIO_readPin+0x180>
		break;

	case PORTC_ID:
		if(GET_BIT(PINC,pin_num))
    150e:	e3 e3       	ldi	r30, 0x33	; 51
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <GPIO_readPin+0x10c>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	2a 95       	dec	r18
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <GPIO_readPin+0x108>
    152c:	9a 01       	movw	r18, r20
    152e:	28 23       	and	r18, r24
    1530:	39 23       	and	r19, r25
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a9 01       	movw	r20, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <GPIO_readPin+0x124>
    153c:	55 95       	asr	r21
    153e:	47 95       	ror	r20
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <GPIO_readPin+0x120>
    1544:	ca 01       	movw	r24, r20
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	19 f0       	breq	.+6      	; 0x1550 <GPIO_readPin+0x134>
			return 1;
    154a:	51 e0       	ldi	r21, 0x01	; 1
    154c:	5d 83       	std	Y+5, r21	; 0x05
    154e:	26 c0       	rjmp	.+76     	; 0x159c <GPIO_readPin+0x180>
		else
			return 0;
    1550:	1d 82       	std	Y+5, r1	; 0x05
    1552:	24 c0       	rjmp	.+72     	; 0x159c <GPIO_readPin+0x180>
		break;

	case PORTD_ID:
		if(GET_BIT(PIND,pin_num))
    1554:	e0 e3       	ldi	r30, 0x30	; 48
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_readPin+0x152>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	2a 95       	dec	r18
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_readPin+0x14e>
    1572:	9a 01       	movw	r18, r20
    1574:	28 23       	and	r18, r24
    1576:	39 23       	and	r19, r25
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <GPIO_readPin+0x16a>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <GPIO_readPin+0x166>
    158a:	ca 01       	movw	r24, r20
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	19 f0       	breq	.+6      	; 0x1596 <GPIO_readPin+0x17a>
			return 1;
    1590:	51 e0       	ldi	r21, 0x01	; 1
    1592:	5d 83       	std	Y+5, r21	; 0x05
    1594:	03 c0       	rjmp	.+6      	; 0x159c <GPIO_readPin+0x180>
		else
			return 0;
    1596:	1d 82       	std	Y+5, r1	; 0x05
    1598:	01 c0       	rjmp	.+2      	; 0x159c <GPIO_readPin+0x180>
		break;
	}
	return 0;
    159a:	1d 82       	std	Y+5, r1	; 0x05
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_setupPortDirection+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_setupPortDirection+0x8>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	90 f5       	brcc	.+100    	; 0x1628 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3c 83       	std	Y+4, r19	; 0x04
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	d1 f0       	breq	.+52     	; 0x160c <GPIO_setupPortDirection+0x5e>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <GPIO_setupPortDirection+0x3e>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <GPIO_setupPortDirection+0x54>
    15ea:	1e c0       	rjmp	.+60     	; 0x1628 <GPIO_setupPortDirection+0x7a>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <GPIO_setupPortDirection+0x68>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	81 f0       	breq	.+32     	; 0x1620 <GPIO_setupPortDirection+0x72>
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	80 83       	st	Z, r24
    160a:	0e c0       	rjmp	.+28     	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    160c:	e7 e3       	ldi	r30, 0x37	; 55
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	80 83       	st	Z, r24
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1616:	e4 e3       	ldi	r30, 0x34	; 52
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	80 83       	st	Z, r24
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1620:	e1 e3       	ldi	r30, 0x31	; 49
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	80 83       	st	Z, r24
			break;
		}
	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePort+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePort+0x8>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
	{
		/* Do Nothing */
	}

	switch(port_num){
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3c 83       	std	Y+4, r19	; 0x04
    164e:	2b 83       	std	Y+3, r18	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	d1 f0       	breq	.+52     	; 0x168e <GPIO_writePort+0x58>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <GPIO_writePort+0x38>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 f0       	breq	.+24     	; 0x1684 <GPIO_writePort+0x4e>
    166c:	1e c0       	rjmp	.+60     	; 0x16aa <GPIO_writePort+0x74>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <GPIO_writePort+0x62>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <GPIO_writePort+0x6c>
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <GPIO_writePort+0x74>

	case PORTA_ID:
		PORTA = value;
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    1698:	e5 e3       	ldi	r30, 0x35	; 53
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    16a2:	e2 e3       	ldi	r30, 0x32	; 50
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
		break;
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <GPIO_readPort+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <GPIO_readPort+0x8>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	10 f0       	brcs	.+4      	; 0x16d0 <GPIO_readPort+0x18>
	{
		return 0;
    16cc:	1c 82       	std	Y+4, r1	; 0x04
    16ce:	34 c0       	rjmp	.+104    	; 0x1738 <GPIO_readPort+0x80>
	}

	switch(port_num){
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	3b 83       	std	Y+3, r19	; 0x03
    16d8:	2a 83       	std	Y+2, r18	; 0x02
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	91 05       	cpc	r25, r1
    16e2:	d1 f0       	breq	.+52     	; 0x1718 <GPIO_readPort+0x60>
    16e4:	2a 81       	ldd	r18, Y+2	; 0x02
    16e6:	3b 81       	ldd	r19, Y+3	; 0x03
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <GPIO_readPort+0x40>
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	61 f0       	breq	.+24     	; 0x170e <GPIO_readPort+0x56>
    16f6:	1f c0       	rjmp	.+62     	; 0x1736 <GPIO_readPort+0x7e>
    16f8:	2a 81       	ldd	r18, Y+2	; 0x02
    16fa:	3b 81       	ldd	r19, Y+3	; 0x03
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	81 f0       	breq	.+32     	; 0x1722 <GPIO_readPort+0x6a>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	9b 81       	ldd	r25, Y+3	; 0x03
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	91 05       	cpc	r25, r1
    170a:	81 f0       	breq	.+32     	; 0x172c <GPIO_readPort+0x74>
    170c:	14 c0       	rjmp	.+40     	; 0x1736 <GPIO_readPort+0x7e>

	case PORTA_ID:
		return PINA;
    170e:	e9 e3       	ldi	r30, 0x39	; 57
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	90 81       	ld	r25, Z
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	10 c0       	rjmp	.+32     	; 0x1738 <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1718:	e6 e3       	ldi	r30, 0x36	; 54
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	20 81       	ld	r18, Z
    171e:	2c 83       	std	Y+4, r18	; 0x04
    1720:	0b c0       	rjmp	.+22     	; 0x1738 <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    1722:	e3 e3       	ldi	r30, 0x33	; 51
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	30 81       	ld	r19, Z
    1728:	3c 83       	std	Y+4, r19	; 0x04
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    172c:	e0 e3       	ldi	r30, 0x30	; 48
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8c 83       	std	Y+4, r24	; 0x04
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <GPIO_readPort+0x80>
		break;
	}
	return 0;
    1736:	1c 82       	std	Y+4, r1	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <__vector_9>:

/****************************************************************************
 *                        INTERRUPT SERVICE ROUTINE
 ****************************************************************************/

ISR(TIMER1_OVF_vect){
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	4f 93       	push	r20
    1758:	5f 93       	push	r21
    175a:	6f 93       	push	r22
    175c:	7f 93       	push	r23
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	af 93       	push	r26
    1764:	bf 93       	push	r27
    1766:	ef 93       	push	r30
    1768:	ff 93       	push	r31
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    1772:	e0 91 ee 01 	lds	r30, 0x01EE
    1776:	f0 91 ef 01 	lds	r31, 0x01EF
    177a:	09 95       	icall
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    17cc:	e0 91 ee 01 	lds	r30, 0x01EE
    17d0:	f0 91 ef 01 	lds	r31, 0x01EF
    17d4:	09 95       	icall
}
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <__vector_8>:

ISR(TIMER1_COMPB_vect){}
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <TIMER1_init>:

/****************************************************************************
 *                         Functions definition
 ****************************************************************************/

void TIMER1_init(TIMER1_configType* configurations){
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	28 97       	sbiw	r28, 0x08	; 8
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05

	uint16 dutyCycle_A,dutyCycle_B;

	switch(configurations->mode){
    183c:	ed 81       	ldd	r30, Y+5	; 0x05
    183e:	fe 81       	ldd	r31, Y+6	; 0x06
    1840:	80 81       	ld	r24, Z
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	38 87       	std	Y+8, r19	; 0x08
    1848:	2f 83       	std	Y+7, r18	; 0x07
    184a:	8f 81       	ldd	r24, Y+7	; 0x07
    184c:	98 85       	ldd	r25, Y+8	; 0x08
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <TIMER1_init+0x3a>
    1854:	45 c0       	rjmp	.+138    	; 0x18e0 <TIMER1_init+0xc4>
    1856:	2f 81       	ldd	r18, Y+7	; 0x07
    1858:	38 85       	ldd	r19, Y+8	; 0x08
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <TIMER1_init+0x4e>
    1860:	8f 81       	ldd	r24, Y+7	; 0x07
    1862:	98 85       	ldd	r25, Y+8	; 0x08
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	71 f0       	breq	.+28     	; 0x1884 <TIMER1_init+0x68>
    1868:	5f c1       	rjmp	.+702    	; 0x1b28 <TIMER1_init+0x30c>
    186a:	2f 81       	ldd	r18, Y+7	; 0x07
    186c:	38 85       	ldd	r19, Y+8	; 0x08
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <TIMER1_init+0x5a>
    1874:	71 c0       	rjmp	.+226    	; 0x1958 <TIMER1_init+0x13c>
    1876:	8f 81       	ldd	r24, Y+7	; 0x07
    1878:	98 85       	ldd	r25, Y+8	; 0x08
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <TIMER1_init+0x66>
    1880:	ca c0       	rjmp	.+404    	; 0x1a16 <TIMER1_init+0x1fa>
    1882:	52 c1       	rjmp	.+676    	; 0x1b28 <TIMER1_init+0x30c>

	case NORMAL:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    1884:	ef e4       	ldi	r30, 0x4F	; 79
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8f 73       	andi	r24, 0x3F	; 63
    188c:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    188e:	ef e4       	ldi	r30, 0x4F	; 79
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8f 7c       	andi	r24, 0xCF	; 207
    1896:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    1898:	ef e4       	ldi	r30, 0x4F	; 79
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	88 60       	ori	r24, 0x08	; 8
    18a0:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    18a2:	ef e4       	ldi	r30, 0x4F	; 79
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	84 60       	ori	r24, 0x04	; 4
    18aa:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Overflow mode */
    18ac:	ef e4       	ldi	r30, 0x4F	; 79
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Overflow mode */
    18b6:	ef e4       	ldi	r30, 0x4F	; 79
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8d 7f       	andi	r24, 0xFD	; 253
    18be:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 0; /* Overflow mode */
    18c0:	ee e4       	ldi	r30, 0x4E	; 78
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	87 7f       	andi	r24, 0xF7	; 247
    18c8:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Overflow mode */
    18ca:	ee e4       	ldi	r30, 0x4E	; 78
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 7e       	andi	r24, 0xEF	; 239
    18d2:	80 83       	st	Z, r24
		TIMSK_R.bit.TOIE1_bit = 1;  /* Enable interrupt for overflow mode */
    18d4:	e9 e5       	ldi	r30, 0x59	; 89
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	84 60       	ori	r24, 0x04	; 4
    18dc:	80 83       	st	Z, r24
    18de:	24 c1       	rjmp	.+584    	; 0x1b28 <TIMER1_init+0x30c>
		break;

	case COMPARE:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    18e0:	ef e4       	ldi	r30, 0x4F	; 79
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 73       	andi	r24, 0x3F	; 63
    18e8:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    18ea:	ef e4       	ldi	r30, 0x4F	; 79
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7c       	andi	r24, 0xCF	; 207
    18f2:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	88 60       	ori	r24, 0x08	; 8
    18fc:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    18fe:	ef e4       	ldi	r30, 0x4F	; 79
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	84 60       	ori	r24, 0x04	; 4
    1906:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Compare mode */
    1908:	ef e4       	ldi	r30, 0x4F	; 79
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8e 7f       	andi	r24, 0xFE	; 254
    1910:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Compare mode */
    1912:	ef e4       	ldi	r30, 0x4F	; 79
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* Compare mode */
    191c:	ee e4       	ldi	r30, 0x4E	; 78
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 60       	ori	r24, 0x08	; 8
    1924:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Compare mode */
    1926:	ee e4       	ldi	r30, 0x4E	; 78
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7e       	andi	r24, 0xEF	; 239
    192e:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1A_bit = 1; /* Enable interrupt for compare mode unit A */
    1930:	e9 e5       	ldi	r30, 0x59	; 89
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 61       	ori	r24, 0x10	; 16
    1938:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1B_bit = 1; /* Enable interrupt for compare mode unit B */
    193a:	e9 e5       	ldi	r30, 0x59	; 89
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 60       	ori	r24, 0x08	; 8
    1942:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value; /* Adjusting compare value */
    1944:	aa e4       	ldi	r26, 0x4A	; 74
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ed 81       	ldd	r30, Y+5	; 0x05
    194a:	fe 81       	ldd	r31, Y+6	; 0x06
    194c:	84 81       	ldd	r24, Z+4	; 0x04
    194e:	95 81       	ldd	r25, Z+5	; 0x05
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	9c 93       	st	X, r25
    1954:	8e 93       	st	-X, r24
    1956:	e8 c0       	rjmp	.+464    	; 0x1b28 <TIMER1_init+0x30c>
		break;

	case PWM_B:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    1958:	e1 e3       	ldi	r30, 0x31	; 49
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	80 61       	ori	r24, 0x10	; 16
    1960:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    1962:	ef e4       	ldi	r30, 0x4F	; 79
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 73       	andi	r24, 0x3F	; 63
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    196e:	ef e4       	ldi	r30, 0x4F	; 79
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8f 7c       	andi	r24, 0xCF	; 207
    1976:	80 62       	ori	r24, 0x20	; 32
    1978:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    197a:	ef e4       	ldi	r30, 0x4F	; 79
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	87 7f       	andi	r24, 0xF7	; 247
    1982:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    1984:	ef e4       	ldi	r30, 0x4F	; 79
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8b 7f       	andi	r24, 0xFB	; 251
    198c:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 1; /* PWM mode TOP = OCR1A */
    198e:	ef e4       	ldi	r30, 0x4F	; 79
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    1998:	ef e4       	ldi	r30, 0x4F	; 79
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    19a2:	ee e4       	ldi	r30, 0x4E	; 78
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	88 60       	ori	r24, 0x08	; 8
    19aa:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    19ac:	ee e4       	ldi	r30, 0x4E	; 78
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 61       	ori	r24, 0x10	; 16
    19b4:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value;
    19b6:	aa e4       	ldi	r26, 0x4A	; 74
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ed 81       	ldd	r30, Y+5	; 0x05
    19bc:	fe 81       	ldd	r31, Y+6	; 0x06
    19be:	84 81       	ldd	r24, Z+4	; 0x04
    19c0:	95 81       	ldd	r25, Z+5	; 0x05
    19c2:	11 96       	adiw	r26, 0x01	; 1
    19c4:	9c 93       	st	X, r25
    19c6:	8e 93       	st	-X, r24
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*OCR1A_R)/100);
    19c8:	ed 81       	ldd	r30, Y+5	; 0x05
    19ca:	fe 81       	ldd	r31, Y+6	; 0x06
    19cc:	87 81       	ldd	r24, Z+7	; 0x07
    19ce:	e8 2e       	mov	r14, r24
    19d0:	ff 24       	eor	r15, r15
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	ea e4       	ldi	r30, 0x4A	; 74
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	9c 01       	movw	r18, r24
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	c8 01       	movw	r24, r16
    19e6:	b7 01       	movw	r22, r14
    19e8:	0e 94 c9 19 	call	0x3392	; 0x3392 <__mulsi3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	24 e6       	ldi	r18, 0x64	; 100
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    1a00:	da 01       	movw	r26, r20
    1a02:	c9 01       	movw	r24, r18
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01

		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    1a08:	e8 e4       	ldi	r30, 0x48	; 72
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
    1a14:	89 c0       	rjmp	.+274    	; 0x1b28 <TIMER1_init+0x30c>
		break;

	case PWM_AB:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    1a16:	e1 e3       	ldi	r30, 0x31	; 49
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 61       	ori	r24, 0x10	; 16
    1a1e:	80 83       	st	Z, r24
		DDRD_R.bit.DDRD5_bit = 1; /* PD4 output pin UNITA */
    1a20:	e1 e3       	ldi	r30, 0x31	; 49
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    1a2a:	ef e4       	ldi	r30, 0x4F	; 79
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 73       	andi	r24, 0x3F	; 63
    1a32:	80 68       	ori	r24, 0x80	; 128
    1a34:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    1a36:	ef e4       	ldi	r30, 0x4F	; 79
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8f 7c       	andi	r24, 0xCF	; 207
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    1a42:	ef e4       	ldi	r30, 0x4F	; 79
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	87 7f       	andi	r24, 0xF7	; 247
    1a4a:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    1a4c:	ef e4       	ldi	r30, 0x4F	; 79
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8b 7f       	andi	r24, 0xFB	; 251
    1a54:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* PWM mode TOP = ICR1 */
    1a56:	ef e4       	ldi	r30, 0x4F	; 79
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8e 7f       	andi	r24, 0xFE	; 254
    1a5e:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    1a60:	ef e4       	ldi	r30, 0x4F	; 79
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	82 60       	ori	r24, 0x02	; 2
    1a68:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    1a6a:	ee e4       	ldi	r30, 0x4E	; 78
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 60       	ori	r24, 0x08	; 8
    1a72:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    1a74:	ee e4       	ldi	r30, 0x4E	; 78
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 61       	ori	r24, 0x10	; 16
    1a7c:	80 83       	st	Z, r24

		ICR1_R = configurations->compare_value; /* Adjusting TOP value for PWM unit A and B */
    1a7e:	a6 e4       	ldi	r26, 0x46	; 70
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ed 81       	ldd	r30, Y+5	; 0x05
    1a84:	fe 81       	ldd	r31, Y+6	; 0x06
    1a86:	84 81       	ldd	r24, Z+4	; 0x04
    1a88:	95 81       	ldd	r25, Z+5	; 0x05
    1a8a:	11 96       	adiw	r26, 0x01	; 1
    1a8c:	9c 93       	st	X, r25
    1a8e:	8e 93       	st	-X, r24
		dutyCycle_A = (uint16)(((uint32)(configurations->UNITA_dutyCycle)*ICR1_R)/100);
    1a90:	ed 81       	ldd	r30, Y+5	; 0x05
    1a92:	fe 81       	ldd	r31, Y+6	; 0x06
    1a94:	86 81       	ldd	r24, Z+6	; 0x06
    1a96:	e8 2e       	mov	r14, r24
    1a98:	ff 24       	eor	r15, r15
    1a9a:	00 e0       	ldi	r16, 0x00	; 0
    1a9c:	10 e0       	ldi	r17, 0x00	; 0
    1a9e:	e6 e4       	ldi	r30, 0x46	; 70
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	9c 01       	movw	r18, r24
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	c8 01       	movw	r24, r16
    1aae:	b7 01       	movw	r22, r14
    1ab0:	0e 94 c9 19 	call	0x3392	; 0x3392 <__mulsi3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	24 e6       	ldi	r18, 0x64	; 100
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    1ac8:	da 01       	movw	r26, r20
    1aca:	c9 01       	movw	r24, r18
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*ICR1_R)/100);
    1ad0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ad4:	87 81       	ldd	r24, Z+7	; 0x07
    1ad6:	e8 2e       	mov	r14, r24
    1ad8:	ff 24       	eor	r15, r15
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	e6 e4       	ldi	r30, 0x46	; 70
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	9c 01       	movw	r18, r24
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	c8 01       	movw	r24, r16
    1aee:	b7 01       	movw	r22, r14
    1af0:	0e 94 c9 19 	call	0x3392	; 0x3392 <__mulsi3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	24 e6       	ldi	r18, 0x64	; 100
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    1b08:	da 01       	movw	r26, r20
    1b0a:	c9 01       	movw	r24, r18
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01

		OCR1A_R = dutyCycle_A; /* Adjusting duty cycle for PWM unit A */
    1b10:	ea e4       	ldi	r30, 0x4A	; 74
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    1b1c:	e8 e4       	ldi	r30, 0x48	; 72
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
		break;
	}

	/* Adjusting the pre-scaler */
	TCCR1B_R.bit.CS1_bit = configurations->prescaler;
    1b28:	ae e4       	ldi	r26, 0x4E	; 78
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b2e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b30:	81 81       	ldd	r24, Z+1	; 0x01
    1b32:	87 70       	andi	r24, 0x07	; 7
    1b34:	98 2f       	mov	r25, r24
    1b36:	97 70       	andi	r25, 0x07	; 7
    1b38:	8c 91       	ld	r24, X
    1b3a:	88 7f       	andi	r24, 0xF8	; 248
    1b3c:	89 2b       	or	r24, r25
    1b3e:	8c 93       	st	X, r24

	/* Adjusting initial value */
	TCNT1_R = configurations->initial_value;
    1b40:	ac e4       	ldi	r26, 0x4C	; 76
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ed 81       	ldd	r30, Y+5	; 0x05
    1b46:	fe 81       	ldd	r31, Y+6	; 0x06
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	11 96       	adiw	r26, 0x01	; 1
    1b4e:	9c 93       	st	X, r25
    1b50:	8e 93       	st	-X, r24
}
    1b52:	28 96       	adiw	r28, 0x08	; 8
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	08 95       	ret

00001b6c <TIMER1_deInit>:


void TIMER1_deInit(void){
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62

	/* No clock source ( disable timer1 ) */
	TCCR1B_R.bit.CS1_bit = 0;
    1b74:	ee e4       	ldi	r30, 0x4E	; 78
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 7f       	andi	r24, 0xF8	; 248
    1b7c:	80 83       	st	Z, r24
}
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <TIMER1_setCallBack>:


void TIMER1_setCallBack(volatile void(*ptr)(void)){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <TIMER1_setCallBack+0x6>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01

	g_callBackptr = ptr;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	90 93 ef 01 	sts	0x01EF, r25
    1b9a:	80 93 ee 01 	sts	0x01EE, r24
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <LCD_sendCommand>:
/***************************************************************************
 *                            Function definition
 * ***************************************************************************/


void LCD_sendCommand(uint8 command){
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	e9 97       	sbiw	r28, 0x39	; 57
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	66 e0       	ldi	r22, 0x06	; 6
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e8       	ldi	r26, 0x80	; 128
    1bce:	bf e3       	ldi	r27, 0x3F	; 63
    1bd0:	8d ab       	std	Y+53, r24	; 0x35
    1bd2:	9e ab       	std	Y+54, r25	; 0x36
    1bd4:	af ab       	std	Y+55, r26	; 0x37
    1bd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bda:	7e a9       	ldd	r23, Y+54	; 0x36
    1bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bde:	98 ad       	ldd	r25, Y+56	; 0x38
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	89 ab       	std	Y+49, r24	; 0x31
    1bf2:	9a ab       	std	Y+50, r25	; 0x32
    1bf4:	ab ab       	std	Y+51, r26	; 0x33
    1bf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <LCD_sendCommand+0x72>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	98 ab       	std	Y+48, r25	; 0x30
    1c16:	8f a7       	std	Y+47, r24	; 0x2f
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1c1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c20:	9c a9       	ldd	r25, Y+52	; 0x34
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	6d a9       	ldd	r22, Y+53	; 0x35
    1c34:	7e a9       	ldd	r23, Y+54	; 0x36
    1c36:	8f a9       	ldd	r24, Y+55	; 0x37
    1c38:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	98 ab       	std	Y+48, r25	; 0x30
    1c58:	8f a7       	std	Y+47, r24	; 0x2f
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <LCD_sendCommand+0xd2>
    1c5c:	88 ec       	ldi	r24, 0xC8	; 200
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e a7       	std	Y+46, r25	; 0x2e
    1c62:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c64:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c66:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_sendCommand+0xc0>
    1c6c:	9e a7       	std	Y+46, r25	; 0x2e
    1c6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c72:	98 a9       	ldd	r25, Y+48	; 0x30
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	98 ab       	std	Y+48, r25	; 0x30
    1c78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <LCD_sendCommand+0xb4>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	69 a9       	ldd	r22, Y+49	; 0x31
    1c86:	7a a9       	ldd	r23, Y+50	; 0x32
    1c88:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	98 ab       	std	Y+48, r25	; 0x30
    1c96:	8f a7       	std	Y+47, r24	; 0x2f
    1c98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9c:	9c a7       	std	Y+44, r25	; 0x2c
    1c9e:	8b a7       	std	Y+43, r24	; 0x2b
    1ca0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_sendCommand+0xfc>
    1ca8:	9c a7       	std	Y+44, r25	; 0x2c
    1caa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* 50ns      in all delays us will only work in simulation but won't in AVR due to bad hardware  */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	67 e0       	ldi	r22, 0x07	; 7
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	8f a3       	std	Y+39, r24	; 0x27
    1cc0:	98 a7       	std	Y+40, r25	; 0x28
    1cc2:	a9 a7       	std	Y+41, r26	; 0x29
    1cc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a ef       	ldi	r20, 0xFA	; 250
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8b a3       	std	Y+35, r24	; 0x23
    1ce0:	9c a3       	std	Y+36, r25	; 0x24
    1ce2:	ad a3       	std	Y+37, r26	; 0x25
    1ce4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_sendCommand+0x160>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9a a3       	std	Y+34, r25	; 0x22
    1d04:	89 a3       	std	Y+33, r24	; 0x21
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	6f a1       	ldd	r22, Y+39	; 0x27
    1d22:	78 a5       	ldd	r23, Y+40	; 0x28
    1d24:	89 a5       	ldd	r24, Y+41	; 0x29
    1d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9a a3       	std	Y+34, r25	; 0x22
    1d46:	89 a3       	std	Y+33, r24	; 0x21
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_sendCommand+0x1c0>
    1d4a:	88 ec       	ldi	r24, 0xC8	; 200
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	98 a3       	std	Y+32, r25	; 0x20
    1d50:	8f 8f       	std	Y+31, r24	; 0x1f
    1d52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d54:	98 a1       	ldd	r25, Y+32	; 0x20
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_sendCommand+0x1ae>
    1d5a:	98 a3       	std	Y+32, r25	; 0x20
    1d5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_sendCommand+0x1a2>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6b a1       	ldd	r22, Y+35	; 0x23
    1d74:	7c a1       	ldd	r23, Y+36	; 0x24
    1d76:	8d a1       	ldd	r24, Y+37	; 0x25
    1d78:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	89 a1       	ldd	r24, Y+33	; 0x21
    1d88:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_sendCommand+0x1ea>
    1d96:	9e 8f       	std	Y+30, r25	; 0x1e
    1d98:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
	_delay_ms(1); /* 100ns */

#elif(LCD_DATA_BIT_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT,command);
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	69 ad       	ldd	r22, Y+57	; 0x39
    1d9e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_writePort>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e8       	ldi	r26, 0x80	; 128
    1da8:	bf e3       	ldi	r27, 0x3F	; 63
    1daa:	89 8f       	std	Y+25, r24	; 0x19
    1dac:	9a 8f       	std	Y+26, r25	; 0x1a
    1dae:	ab 8f       	std	Y+27, r26	; 0x1b
    1db0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	69 8d       	ldd	r22, Y+25	; 0x19
    1db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8d 8b       	std	Y+21, r24	; 0x15
    1dcc:	9e 8b       	std	Y+22, r25	; 0x16
    1dce:	af 8b       	std	Y+23, r26	; 0x17
    1dd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <LCD_sendCommand+0x2ac>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9a 8b       	std	Y+18, r25	; 0x12
    1e3c:	89 8b       	std	Y+17, r24	; 0x11
    1e3e:	89 89       	ldd	r24, Y+17	; 0x11
    1e40:	9a 89       	ldd	r25, Y+18	; 0x12
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_sendCommand+0x29a>
    1e46:	9a 8b       	std	Y+18, r25	; 0x12
    1e48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8b 89       	ldd	r24, Y+19	; 0x13
    1e56:	9c 89       	ldd	r25, Y+20	; 0x14
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <LCD_sendCommand+0x28e>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9c 8b       	std	Y+20, r25	; 0x14
    1e70:	8b 8b       	std	Y+19, r24	; 0x13
    1e72:	8b 89       	ldd	r24, Y+19	; 0x13
    1e74:	9c 89       	ldd	r25, Y+20	; 0x14
    1e76:	98 8b       	std	Y+16, r25	; 0x10
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
    1e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7c:	98 89       	ldd	r25, Y+16	; 0x10
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_sendCommand+0x2d6>
    1e82:	98 8b       	std	Y+16, r25	; 0x10
    1e84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    1e86:	83 e0       	ldi	r24, 0x03	; 3
    1e88:	67 e0       	ldi	r22, 0x07	; 7
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e8       	ldi	r26, 0x80	; 128
    1e96:	bf e3       	ldi	r27, 0x3F	; 63
    1e98:	8b 87       	std	Y+11, r24	; 0x0b
    1e9a:	9c 87       	std	Y+12, r25	; 0x0c
    1e9c:	ad 87       	std	Y+13, r26	; 0x0d
    1e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a ef       	ldi	r20, 0xFA	; 250
    1eae:	54 e4       	ldi	r21, 0x44	; 68
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8f 83       	std	Y+7, r24	; 0x07
    1eba:	98 87       	std	Y+8, r25	; 0x08
    1ebc:	a9 87       	std	Y+9, r26	; 0x09
    1ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	4c f5       	brge	.+82     	; 0x1f4c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <LCD_sendCommand+0x39a>
    1f24:	88 ec       	ldi	r24, 0xC8	; 200
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_sendCommand+0x388>
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <LCD_sendCommand+0x37c>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_sendCommand+0x3c4>
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* 13ns */

#endif

}//end LCD_sendCommand
    1f74:	e9 96       	adiw	r28, 0x39	; 57
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	e9 97       	sbiw	r28, 0x39	; 57
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	66 e0       	ldi	r22, 0x06	; 6
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e8       	ldi	r26, 0x80	; 128
    1fac:	bf e3       	ldi	r27, 0x3F	; 63
    1fae:	8d ab       	std	Y+53, r24	; 0x35
    1fb0:	9e ab       	std	Y+54, r25	; 0x36
    1fb2:	af ab       	std	Y+55, r26	; 0x37
    1fb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fba:	8f a9       	ldd	r24, Y+55	; 0x37
    1fbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4a ef       	ldi	r20, 0xFA	; 250
    1fc4:	54 e4       	ldi	r21, 0x44	; 68
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	89 ab       	std	Y+49, r24	; 0x31
    1fd0:	9a ab       	std	Y+50, r25	; 0x32
    1fd2:	ab ab       	std	Y+51, r26	; 0x33
    1fd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	98 ab       	std	Y+48, r25	; 0x30
    1ff4:	8f a7       	std	Y+47, r24	; 0x2f
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1ff8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffa:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	4c f5       	brge	.+82     	; 0x2062 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	6d a9       	ldd	r22, Y+53	; 0x35
    2012:	7e a9       	ldd	r23, Y+54	; 0x36
    2014:	8f a9       	ldd	r24, Y+55	; 0x37
    2016:	98 ad       	ldd	r25, Y+56	; 0x38
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	98 ab       	std	Y+48, r25	; 0x30
    2036:	8f a7       	std	Y+47, r24	; 0x2f
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <LCD_displayCharacter+0xd2>
    203a:	88 ec       	ldi	r24, 0xC8	; 200
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	9e a7       	std	Y+46, r25	; 0x2e
    2040:	8d a7       	std	Y+45, r24	; 0x2d
    2042:	8d a5       	ldd	r24, Y+45	; 0x2d
    2044:	9e a5       	ldd	r25, Y+46	; 0x2e
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_displayCharacter+0xc0>
    204a:	9e a7       	std	Y+46, r25	; 0x2e
    204c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2050:	98 a9       	ldd	r25, Y+48	; 0x30
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	98 ab       	std	Y+48, r25	; 0x30
    2056:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	8f a5       	ldd	r24, Y+47	; 0x2f
    205a:	98 a9       	ldd	r25, Y+48	; 0x30
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f7       	brne	.-38     	; 0x203a <LCD_displayCharacter+0xb4>
    2060:	14 c0       	rjmp	.+40     	; 0x208a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	69 a9       	ldd	r22, Y+49	; 0x31
    2064:	7a a9       	ldd	r23, Y+50	; 0x32
    2066:	8b a9       	ldd	r24, Y+51	; 0x33
    2068:	9c a9       	ldd	r25, Y+52	; 0x34
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	98 ab       	std	Y+48, r25	; 0x30
    2074:	8f a7       	std	Y+47, r24	; 0x2f
    2076:	8f a5       	ldd	r24, Y+47	; 0x2f
    2078:	98 a9       	ldd	r25, Y+48	; 0x30
    207a:	9c a7       	std	Y+44, r25	; 0x2c
    207c:	8b a7       	std	Y+43, r24	; 0x2b
    207e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2080:	9c a5       	ldd	r25, Y+44	; 0x2c
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_displayCharacter+0xfc>
    2086:	9c a7       	std	Y+44, r25	; 0x2c
    2088:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* 50ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	67 e0       	ldi	r22, 0x07	; 7
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e8       	ldi	r26, 0x80	; 128
    209a:	bf e3       	ldi	r27, 0x3F	; 63
    209c:	8f a3       	std	Y+39, r24	; 0x27
    209e:	98 a7       	std	Y+40, r25	; 0x28
    20a0:	a9 a7       	std	Y+41, r26	; 0x29
    20a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6f a1       	ldd	r22, Y+39	; 0x27
    20a6:	78 a5       	ldd	r23, Y+40	; 0x28
    20a8:	89 a5       	ldd	r24, Y+41	; 0x29
    20aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8b a3       	std	Y+35, r24	; 0x23
    20be:	9c a3       	std	Y+36, r25	; 0x24
    20c0:	ad a3       	std	Y+37, r26	; 0x25
    20c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20c4:	6b a1       	ldd	r22, Y+35	; 0x23
    20c6:	7c a1       	ldd	r23, Y+36	; 0x24
    20c8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ca:	9e a1       	ldd	r25, Y+38	; 0x26
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9a a3       	std	Y+34, r25	; 0x22
    20e2:	89 a3       	std	Y+33, r24	; 0x21
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    20e6:	6b a1       	ldd	r22, Y+35	; 0x23
    20e8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ea:	8d a1       	ldd	r24, Y+37	; 0x25
    20ec:	9e a1       	ldd	r25, Y+38	; 0x26
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2100:	78 a5       	ldd	r23, Y+40	; 0x28
    2102:	89 a5       	ldd	r24, Y+41	; 0x29
    2104:	9a a5       	ldd	r25, Y+42	; 0x2a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9a a3       	std	Y+34, r25	; 0x22
    2124:	89 a3       	std	Y+33, r24	; 0x21
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LCD_displayCharacter+0x1c0>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	98 a3       	std	Y+32, r25	; 0x20
    212e:	8f 8f       	std	Y+31, r24	; 0x1f
    2130:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2132:	98 a1       	ldd	r25, Y+32	; 0x20
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_displayCharacter+0x1ae>
    2138:	98 a3       	std	Y+32, r25	; 0x20
    213a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	89 a1       	ldd	r24, Y+33	; 0x21
    213e:	9a a1       	ldd	r25, Y+34	; 0x22
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9a a3       	std	Y+34, r25	; 0x22
    2144:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	89 a1       	ldd	r24, Y+33	; 0x21
    2148:	9a a1       	ldd	r25, Y+34	; 0x22
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <LCD_displayCharacter+0x1a2>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6b a1       	ldd	r22, Y+35	; 0x23
    2152:	7c a1       	ldd	r23, Y+36	; 0x24
    2154:	8d a1       	ldd	r24, Y+37	; 0x25
    2156:	9e a1       	ldd	r25, Y+38	; 0x26
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9a a3       	std	Y+34, r25	; 0x22
    2162:	89 a3       	std	Y+33, r24	; 0x21
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	9e 8f       	std	Y+30, r25	; 0x1e
    216a:	8d 8f       	std	Y+29, r24	; 0x1d
    216c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    216e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_displayCharacter+0x1ea>
    2174:	9e 8f       	std	Y+30, r25	; 0x1e
    2176:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
	_delay_ms(1); /* 13ns */

#elif(LCD_DATA_BIT_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT,character);
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	69 ad       	ldd	r22, Y+57	; 0x39
    217c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <GPIO_writePort>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e8       	ldi	r26, 0x80	; 128
    2186:	bf e3       	ldi	r27, 0x3F	; 63
    2188:	89 8f       	std	Y+25, r24	; 0x19
    218a:	9a 8f       	std	Y+26, r25	; 0x1a
    218c:	ab 8f       	std	Y+27, r26	; 0x1b
    218e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8d 8b       	std	Y+21, r24	; 0x15
    21aa:	9e 8b       	std	Y+22, r25	; 0x16
    21ac:	af 8b       	std	Y+23, r26	; 0x17
    21ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 8b       	std	Y+20, r25	; 0x14
    21ce:	8b 8b       	std	Y+19, r24	; 0x13
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	69 8d       	ldd	r22, Y+25	; 0x19
    21ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <LCD_displayCharacter+0x2ac>
    2214:	88 ec       	ldi	r24, 0xC8	; 200
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9a 8b       	std	Y+18, r25	; 0x12
    221a:	89 8b       	std	Y+17, r24	; 0x11
    221c:	89 89       	ldd	r24, Y+17	; 0x11
    221e:	9a 89       	ldd	r25, Y+18	; 0x12
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_displayCharacter+0x29a>
    2224:	9a 8b       	std	Y+18, r25	; 0x12
    2226:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8b 89       	ldd	r24, Y+19	; 0x13
    222a:	9c 89       	ldd	r25, Y+20	; 0x14
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9c 8b       	std	Y+20, r25	; 0x14
    2230:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8b 89       	ldd	r24, Y+19	; 0x13
    2234:	9c 89       	ldd	r25, Y+20	; 0x14
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <LCD_displayCharacter+0x28e>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6d 89       	ldd	r22, Y+21	; 0x15
    223e:	7e 89       	ldd	r23, Y+22	; 0x16
    2240:	8f 89       	ldd	r24, Y+23	; 0x17
    2242:	98 8d       	ldd	r25, Y+24	; 0x18
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	98 8b       	std	Y+16, r25	; 0x10
    2256:	8f 87       	std	Y+15, r24	; 0x0f
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	98 89       	ldd	r25, Y+16	; 0x10
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_displayCharacter+0x2d6>
    2260:	98 8b       	std	Y+16, r25	; 0x10
    2262:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    2264:	83 e0       	ldi	r24, 0x03	; 3
    2266:	67 e0       	ldi	r22, 0x07	; 7
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e8       	ldi	r26, 0x80	; 128
    2274:	bf e3       	ldi	r27, 0x3F	; 63
    2276:	8b 87       	std	Y+11, r24	; 0x0b
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	ad 87       	std	Y+13, r26	; 0x0d
    227c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8f 83       	std	Y+7, r24	; 0x07
    2298:	98 87       	std	Y+8, r25	; 0x08
    229a:	a9 87       	std	Y+9, r26	; 0x09
    229c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	3f c0       	rjmp	.+126    	; 0x233e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <LCD_displayCharacter+0x39a>
    2302:	88 ec       	ldi	r24, 0xC8	; 200
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <LCD_displayCharacter+0x388>
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <LCD_displayCharacter+0x37c>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_displayCharacter+0x3c4>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* 13ns */

#endif

}//end LCD_displayCharacter
    2352:	e9 96       	adiw	r28, 0x39	; 57
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <LCD_init>:

void LCD_init(void){
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	2e 97       	sbiw	r28, 0x0e	; 14
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	66 e0       	ldi	r22, 0x06	; 6
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT,LCD_ENABLE_PIN,PIN_OUTPUT);
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	67 e0       	ldi	r22, 0x07	; 7
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 ea       	ldi	r26, 0xA0	; 160
    2392:	b1 e4       	ldi	r27, 0x41	; 65
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	9c 87       	std	Y+12, r25	; 0x0c
    2398:	ad 87       	std	Y+13, r26	; 0x0d
    239a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a ef       	ldi	r20, 0xFA	; 250
    23aa:	54 e4       	ldi	r21, 0x44	; 68
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8f 83       	std	Y+7, r24	; 0x07
    23b6:	98 87       	std	Y+8, r25	; 0x08
    23b8:	a9 87       	std	Y+9, r26	; 0x09
    23ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_init+0x7a>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_init+0xf8>
	else if (__tmp > 65535)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_init+0xda>
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	8b 83       	std	Y+3, r24	; 0x03
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_init+0xc8>
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_init+0xbc>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_init+0x104>
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BIT_MODE == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	6f ef       	ldi	r22, 0xFF	; 255
    2474:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <GPIO_setupPortDirection>
	LCD_sendCommand(TWO_LINES_EIGHT_BITS_MODE); /* 2lines + 8-bits */
    2478:	88 e3       	ldi	r24, 0x38	; 56
    247a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>

#endif
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    247e:	8c e0       	ldi	r24, 0x0C	; 12
    2480:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear screen */
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>

}//end LCD_init
    248a:	2e 96       	adiw	r28, 0x0e	; 14
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <LCD_displayString>:

void LCD_displayString(uint8 * str){
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <LCD_displayString+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <LCD_displayString+0x8>
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0; str[i] != '\0' ;i++){
    24ac:	1a 82       	std	Y+2, r1	; 0x02
    24ae:	19 82       	std	Y+1, r1	; 0x01
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <LCD_displayString+0x34>
		LCD_displayCharacter(str[i]);
    24b2:	29 81       	ldd	r18, Y+1	; 0x01
    24b4:	3a 81       	ldd	r19, Y+2	; 0x02
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	fc 01       	movw	r30, r24
    24bc:	e2 0f       	add	r30, r18
    24be:	f3 1f       	adc	r31, r19
    24c0:	80 81       	ld	r24, Z
    24c2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_displayCharacter>

}//end LCD_init

void LCD_displayString(uint8 * str){
	int i;
	for(i=0; str[i] != '\0' ;i++){
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	29 81       	ldd	r18, Y+1	; 0x01
    24d2:	3a 81       	ldd	r19, Y+2	; 0x02
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	fc 01       	movw	r30, r24
    24da:	e2 0f       	add	r30, r18
    24dc:	f3 1f       	adc	r31, r19
    24de:	80 81       	ld	r24, Z
    24e0:	88 23       	and	r24, r24
    24e2:	39 f7       	brne	.-50     	; 0x24b2 <LCD_displayString+0x16>
		LCD_displayCharacter(str[i]);
	}//end for

}//end LCD_displayString
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LCD_moveCursor>:
 * 0x80 is the command for moving cursor 1000 0000  ( no address this far )
 * the missing parameters is the position of column and base of row
 * first row : 00	second row : 40		third row : 10	fourth row : 50
 * and position of column from 0 to F
 * */
void LCD_moveCursor(uint8 row,uint8 col){
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <LCD_moveCursor+0x6>
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <LCD_moveCursor+0x8>
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	6a 83       	std	Y+2, r22	; 0x02

	switch(row){
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	3c 83       	std	Y+4, r19	; 0x04
    250a:	2b 83       	std	Y+3, r18	; 0x03
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	81 30       	cpi	r24, 0x01	; 1
    2512:	91 05       	cpc	r25, r1
    2514:	d1 f0       	breq	.+52     	; 0x254a <LCD_moveCursor+0x58>
    2516:	2b 81       	ldd	r18, Y+3	; 0x03
    2518:	3c 81       	ldd	r19, Y+4	; 0x04
    251a:	22 30       	cpi	r18, 0x02	; 2
    251c:	31 05       	cpc	r19, r1
    251e:	2c f4       	brge	.+10     	; 0x252a <LCD_moveCursor+0x38>
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	61 f0       	breq	.+24     	; 0x2540 <LCD_moveCursor+0x4e>
    2528:	1f c0       	rjmp	.+62     	; 0x2568 <LCD_moveCursor+0x76>
    252a:	2b 81       	ldd	r18, Y+3	; 0x03
    252c:	3c 81       	ldd	r19, Y+4	; 0x04
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	81 f0       	breq	.+32     	; 0x2554 <LCD_moveCursor+0x62>
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	83 30       	cpi	r24, 0x03	; 3
    253a:	91 05       	cpc	r25, r1
    253c:	81 f0       	breq	.+32     	; 0x255e <LCD_moveCursor+0x6c>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <LCD_moveCursor+0x76>

	case 0:
		return LCD_sendCommand(0x80 + col);
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	80 58       	subi	r24, 0x80	; 128
    2544:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>
    2548:	12 c0       	rjmp	.+36     	; 0x256e <LCD_moveCursor+0x7c>
	case 1:
		return LCD_sendCommand(0x80 + 0x40 + col);
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	80 54       	subi	r24, 0x40	; 64
    254e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>
    2552:	0d c0       	rjmp	.+26     	; 0x256e <LCD_moveCursor+0x7c>
	case 2:
		return LCD_sendCommand(0x80 + 0x10 + col);
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	80 57       	subi	r24, 0x70	; 112
    2558:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>
    255c:	08 c0       	rjmp	.+16     	; 0x256e <LCD_moveCursor+0x7c>
	case 3:
		return LCD_sendCommand(0x80 + 0x50 + col);
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	80 53       	subi	r24, 0x30	; 48
    2562:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>
    2566:	03 c0       	rjmp	.+6      	; 0x256e <LCD_moveCursor+0x7c>
	default:
		return LCD_sendCommand(0x80);
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>
	}//end switch

}//end LCD_moveCursor
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8* string, uint8 row, uint8 col){
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <LCD_displayStringRowColumn+0x6>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <LCD_displayStringRowColumn+0x8>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	6b 83       	std	Y+3, r22	; 0x03
    258e:	4c 83       	std	Y+4, r20	; 0x04

	LCD_moveCursor(row,col);
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	6c 81       	ldd	r22, Y+4	; 0x04
    2594:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
	LCD_displayString(string);
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayString>

}//end LCD_displayStringRowColumn
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <LCD_clearScreen>:

void LCD_clearScreen(void){
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(CLEAR_SCREEN);
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_sendCommand>

}//end LCD_clearScreen
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <LCD_intgerToString>:

void LCD_intgerToString(uint32 data){
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	64 97       	sbiw	r28, 0x14	; 20
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	69 8b       	std	Y+17, r22	; 0x11
    25d8:	7a 8b       	std	Y+18, r23	; 0x12
    25da:	8b 8b       	std	Y+19, r24	; 0x13
    25dc:	9c 8b       	std	Y+20, r25	; 0x14

	uint8 buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    25de:	89 89       	ldd	r24, Y+17	; 0x11
    25e0:	9a 89       	ldd	r25, Y+18	; 0x12
    25e2:	9e 01       	movw	r18, r28
    25e4:	2f 5f       	subi	r18, 0xFF	; 255
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	b9 01       	movw	r22, r18
    25ea:	4a e0       	ldi	r20, 0x0A	; 10
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	0e 94 41 1a 	call	0x3482	; 0x3482 <itoa>
	LCD_displayString(buff); /* Display the string */
    25f2:	ce 01       	movw	r24, r28
    25f4:	01 96       	adiw	r24, 0x01	; 1
    25f6:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayString>

}//end LCD_intgerToString
    25fa:	64 96       	adiw	r28, 0x14	; 20
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <KEYPAD_getPressedKey>:

/***************************************************************************
 *                            Function definition
 * ***************************************************************************/

uint8 KEYPAD_getPressedKey(void){
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	60 97       	sbiw	r28, 0x10	; 16
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61

	uint8 row,col;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN,PIN_INPUT);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+1,PIN_INPUT);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+2,PIN_INPUT);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	62 e0       	ldi	r22, 0x02	; 2
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+3,PIN_INPUT);
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	63 e0       	ldi	r22, 0x03	; 3
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN,PIN_INPUT);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	64 e0       	ldi	r22, 0x04	; 4
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+1,PIN_INPUT);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	65 e0       	ldi	r22, 0x05	; 5
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+2,PIN_INPUT);
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	66 e0       	ldi	r22, 0x06	; 6
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_OF_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+3,PIN_INPUT);
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	67 e0       	ldi	r22, 0x07	; 7
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
#endif

	while(1){

		for(row=0;row<KEYPAD_NUM_OF_ROWS;row++){
    2670:	18 8a       	std	Y+16, r1	; 0x10
    2672:	ab c0       	rjmp	.+342    	; 0x27ca <KEYPAD_getPressedKey+0x1be>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_OUTPUT);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	68 89       	ldd	r22, Y+16	; 0x10
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>

			GPIO_writePin(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,KEYPAD_PRESSED);
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	68 89       	ldd	r22, Y+16	; 0x10
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 23 09 	call	0x1246	; 0x1246 <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_OF_COLS;col++){
    2688:	1f 86       	std	Y+15, r1	; 0x0f
    268a:	22 c0       	rjmp	.+68     	; 0x26d0 <KEYPAD_getPressedKey+0xc4>

				if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+col) == KEYPAD_PRESSED){
    268c:	8f 85       	ldd	r24, Y+15	; 0x0f
    268e:	98 2f       	mov	r25, r24
    2690:	9c 5f       	subi	r25, 0xFC	; 252
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	69 2f       	mov	r22, r25
    2696:	0e 94 0e 0a 	call	0x141c	; 0x141c <GPIO_readPin>
    269a:	88 23       	and	r24, r24
    269c:	b1 f4       	brne	.+44     	; 0x26ca <KEYPAD_getPressedKey+0xbe>
					return (KEYPAD_4x4_adjustKey((row*KEYPAD_NUM_OF_COLS)+col+1));
				#endif


				#ifndef STANDARD_KEYPAD
					return (KEYPAD_rev4x4_adjustKey((row*KEYPAD_NUM_OF_COLS)+col+1));
    269e:	88 89       	ldd	r24, Y+16	; 0x10
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	98 2f       	mov	r25, r24
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	89 0f       	add	r24, r25
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <KEYPAD_rev4x4_adjustKey>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_INPUT);
			_delay_ms(10);
		}//end outer for
	}//end while
}
    26b8:	60 96       	adiw	r28, 0x10	; 16
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_OUTPUT);

			GPIO_writePin(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,KEYPAD_PRESSED);

			for(col=0;col<KEYPAD_NUM_OF_COLS;col++){
    26ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	8f 87       	std	Y+15, r24	; 0x0f
    26d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	d8 f2       	brcs	.-74     	; 0x268c <KEYPAD_getPressedKey+0x80>

#endif
				}
			}//end inner for

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_INPUT);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	68 89       	ldd	r22, Y+16	; 0x10
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 38 08 	call	0x1070	; 0x1070 <GPIO_setupPinDirection>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 e2       	ldi	r26, 0x20	; 32
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	8b 87       	std	Y+11, r24	; 0x0b
    26ea:	9c 87       	std	Y+12, r25	; 0x0c
    26ec:	ad 87       	std	Y+13, r26	; 0x0d
    26ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4a ef       	ldi	r20, 0xFA	; 250
    26fe:	54 e4       	ldi	r21, 0x44	; 68
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8f 83       	std	Y+7, r24	; 0x07
    270a:	98 87       	std	Y+8, r25	; 0x08
    270c:	a9 87       	std	Y+9, r26	; 0x09
    270e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2710:	6f 81       	ldd	r22, Y+7	; 0x07
    2712:	78 85       	ldd	r23, Y+8	; 0x08
    2714:	89 85       	ldd	r24, Y+9	; 0x09
    2716:	9a 85       	ldd	r25, Y+10	; 0x0a
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	2c f4       	brge	.+10     	; 0x2732 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	3f c0       	rjmp	.+126    	; 0x27b0 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2732:	6f 81       	ldd	r22, Y+7	; 0x07
    2734:	78 85       	ldd	r23, Y+8	; 0x08
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	3f ef       	ldi	r19, 0xFF	; 255
    273e:	4f e7       	ldi	r20, 0x7F	; 127
    2740:	57 e4       	ldi	r21, 0x47	; 71
    2742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2746:	18 16       	cp	r1, r24
    2748:	4c f5       	brge	.+82     	; 0x279c <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	6b 85       	ldd	r22, Y+11	; 0x0b
    274c:	7c 85       	ldd	r23, Y+12	; 0x0c
    274e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2750:	9e 85       	ldd	r25, Y+14	; 0x0e
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e2       	ldi	r20, 0x20	; 32
    2758:	51 e4       	ldi	r21, 0x41	; 65
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8d 83       	std	Y+5, r24	; 0x05
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <KEYPAD_getPressedKey+0x186>
    2774:	88 ec       	ldi	r24, 0xC8	; 200
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <KEYPAD_getPressedKey+0x174>
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	69 f7       	brne	.-38     	; 0x2774 <KEYPAD_getPressedKey+0x168>
    279a:	14 c0       	rjmp	.+40     	; 0x27c4 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279c:	6f 81       	ldd	r22, Y+7	; 0x07
    279e:	78 85       	ldd	r23, Y+8	; 0x08
    27a0:	89 85       	ldd	r24, Y+9	; 0x09
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	9e 83       	std	Y+6, r25	; 0x06
    27ae:	8d 83       	std	Y+5, r24	; 0x05
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	9a 81       	ldd	r25, Y+2	; 0x02
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <KEYPAD_getPressedKey+0x1b0>
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+3,PIN_INPUT);
#endif

	while(1){

		for(row=0;row<KEYPAD_NUM_OF_ROWS;row++){
    27c4:	88 89       	ldd	r24, Y+16	; 0x10
    27c6:	8f 5f       	subi	r24, 0xFF	; 255
    27c8:	88 8b       	std	Y+16, r24	; 0x10
    27ca:	88 89       	ldd	r24, Y+16	; 0x10
    27cc:	84 30       	cpi	r24, 0x04	; 4
    27ce:	08 f4       	brcc	.+2      	; 0x27d2 <KEYPAD_getPressedKey+0x1c6>
    27d0:	51 cf       	rjmp	.-350    	; 0x2674 <KEYPAD_getPressedKey+0x68>
    27d2:	4e cf       	rjmp	.-356    	; 0x2670 <KEYPAD_getPressedKey+0x64>

000027d4 <KEYPAD_rev4x4_adjustKey>:


#elif(KEYPAD_NUM_OF_COLS == 4)

#ifndef STANDARD_KEYPAD
static uint8 KEYPAD_rev4x4_adjustKey(uint8 num){
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <KEYPAD_rev4x4_adjustKey+0x6>
    27da:	00 d0       	rcall	.+0      	; 0x27dc <KEYPAD_rev4x4_adjustKey+0x8>
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	89 83       	std	Y+1, r24	; 0x01

	switch(num){
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	3c 83       	std	Y+4, r19	; 0x04
    27ea:	2b 83       	std	Y+3, r18	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	88 30       	cpi	r24, 0x08	; 8
    27f2:	91 05       	cpc	r25, r1
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <KEYPAD_rev4x4_adjustKey+0x24>
    27f6:	6f c0       	rjmp	.+222    	; 0x28d6 <KEYPAD_rev4x4_adjustKey+0x102>
    27f8:	2b 81       	ldd	r18, Y+3	; 0x03
    27fa:	3c 81       	ldd	r19, Y+4	; 0x04
    27fc:	29 30       	cpi	r18, 0x09	; 9
    27fe:	31 05       	cpc	r19, r1
    2800:	54 f5       	brge	.+84     	; 0x2856 <KEYPAD_rev4x4_adjustKey+0x82>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	84 30       	cpi	r24, 0x04	; 4
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <KEYPAD_rev4x4_adjustKey+0x3a>
    280c:	58 c0       	rjmp	.+176    	; 0x28be <KEYPAD_rev4x4_adjustKey+0xea>
    280e:	2b 81       	ldd	r18, Y+3	; 0x03
    2810:	3c 81       	ldd	r19, Y+4	; 0x04
    2812:	25 30       	cpi	r18, 0x05	; 5
    2814:	31 05       	cpc	r19, r1
    2816:	94 f4       	brge	.+36     	; 0x283c <KEYPAD_rev4x4_adjustKey+0x68>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	82 30       	cpi	r24, 0x02	; 2
    281e:	91 05       	cpc	r25, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <KEYPAD_rev4x4_adjustKey+0x50>
    2822:	47 c0       	rjmp	.+142    	; 0x28b2 <KEYPAD_rev4x4_adjustKey+0xde>
    2824:	2b 81       	ldd	r18, Y+3	; 0x03
    2826:	3c 81       	ldd	r19, Y+4	; 0x04
    2828:	23 30       	cpi	r18, 0x03	; 3
    282a:	31 05       	cpc	r19, r1
    282c:	0c f0       	brlt	.+2      	; 0x2830 <KEYPAD_rev4x4_adjustKey+0x5c>
    282e:	44 c0       	rjmp	.+136    	; 0x28b8 <KEYPAD_rev4x4_adjustKey+0xe4>
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	91 05       	cpc	r25, r1
    2838:	c9 f1       	breq	.+114    	; 0x28ac <KEYPAD_rev4x4_adjustKey+0xd8>
    283a:	66 c0       	rjmp	.+204    	; 0x2908 <KEYPAD_rev4x4_adjustKey+0x134>
    283c:	2b 81       	ldd	r18, Y+3	; 0x03
    283e:	3c 81       	ldd	r19, Y+4	; 0x04
    2840:	26 30       	cpi	r18, 0x06	; 6
    2842:	31 05       	cpc	r19, r1
    2844:	09 f4       	brne	.+2      	; 0x2848 <KEYPAD_rev4x4_adjustKey+0x74>
    2846:	41 c0       	rjmp	.+130    	; 0x28ca <KEYPAD_rev4x4_adjustKey+0xf6>
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	87 30       	cpi	r24, 0x07	; 7
    284e:	91 05       	cpc	r25, r1
    2850:	0c f0       	brlt	.+2      	; 0x2854 <KEYPAD_rev4x4_adjustKey+0x80>
    2852:	3e c0       	rjmp	.+124    	; 0x28d0 <KEYPAD_rev4x4_adjustKey+0xfc>
    2854:	37 c0       	rjmp	.+110    	; 0x28c4 <KEYPAD_rev4x4_adjustKey+0xf0>
    2856:	2b 81       	ldd	r18, Y+3	; 0x03
    2858:	3c 81       	ldd	r19, Y+4	; 0x04
    285a:	2c 30       	cpi	r18, 0x0C	; 12
    285c:	31 05       	cpc	r19, r1
    285e:	09 f4       	brne	.+2      	; 0x2862 <KEYPAD_rev4x4_adjustKey+0x8e>
    2860:	46 c0       	rjmp	.+140    	; 0x28ee <KEYPAD_rev4x4_adjustKey+0x11a>
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	8d 30       	cpi	r24, 0x0D	; 13
    2868:	91 05       	cpc	r25, r1
    286a:	5c f4       	brge	.+22     	; 0x2882 <KEYPAD_rev4x4_adjustKey+0xae>
    286c:	2b 81       	ldd	r18, Y+3	; 0x03
    286e:	3c 81       	ldd	r19, Y+4	; 0x04
    2870:	2a 30       	cpi	r18, 0x0A	; 10
    2872:	31 05       	cpc	r19, r1
    2874:	b1 f1       	breq	.+108    	; 0x28e2 <KEYPAD_rev4x4_adjustKey+0x10e>
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	8b 30       	cpi	r24, 0x0B	; 11
    287c:	91 05       	cpc	r25, r1
    287e:	a4 f5       	brge	.+104    	; 0x28e8 <KEYPAD_rev4x4_adjustKey+0x114>
    2880:	2d c0       	rjmp	.+90     	; 0x28dc <KEYPAD_rev4x4_adjustKey+0x108>
    2882:	2b 81       	ldd	r18, Y+3	; 0x03
    2884:	3c 81       	ldd	r19, Y+4	; 0x04
    2886:	2e 30       	cpi	r18, 0x0E	; 14
    2888:	31 05       	cpc	r19, r1
    288a:	b1 f1       	breq	.+108    	; 0x28f8 <KEYPAD_rev4x4_adjustKey+0x124>
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	8e 30       	cpi	r24, 0x0E	; 14
    2892:	91 05       	cpc	r25, r1
    2894:	7c f1       	brlt	.+94     	; 0x28f4 <KEYPAD_rev4x4_adjustKey+0x120>
    2896:	2b 81       	ldd	r18, Y+3	; 0x03
    2898:	3c 81       	ldd	r19, Y+4	; 0x04
    289a:	2f 30       	cpi	r18, 0x0F	; 15
    289c:	31 05       	cpc	r19, r1
    289e:	71 f1       	breq	.+92     	; 0x28fc <KEYPAD_rev4x4_adjustKey+0x128>
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	80 31       	cpi	r24, 0x10	; 16
    28a6:	91 05       	cpc	r25, r1
    28a8:	61 f1       	breq	.+88     	; 0x2902 <KEYPAD_rev4x4_adjustKey+0x12e>
    28aa:	2e c0       	rjmp	.+92     	; 0x2908 <KEYPAD_rev4x4_adjustKey+0x134>
	case 1:
		return 7;
    28ac:	97 e0       	ldi	r25, 0x07	; 7
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	2d c0       	rjmp	.+90     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 2:
		return 8;
    28b2:	28 e0       	ldi	r18, 0x08	; 8
    28b4:	2a 83       	std	Y+2, r18	; 0x02
    28b6:	2a c0       	rjmp	.+84     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 3:
		return 9;
    28b8:	39 e0       	ldi	r19, 0x09	; 9
    28ba:	3a 83       	std	Y+2, r19	; 0x02
    28bc:	27 c0       	rjmp	.+78     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 4:
		return '/';
    28be:	8f e2       	ldi	r24, 0x2F	; 47
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	24 c0       	rjmp	.+72     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 5:
		return 4;
    28c4:	94 e0       	ldi	r25, 0x04	; 4
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	21 c0       	rjmp	.+66     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 6:
		return 5;
    28ca:	25 e0       	ldi	r18, 0x05	; 5
    28cc:	2a 83       	std	Y+2, r18	; 0x02
    28ce:	1e c0       	rjmp	.+60     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 7:
		return 6;
    28d0:	36 e0       	ldi	r19, 0x06	; 6
    28d2:	3a 83       	std	Y+2, r19	; 0x02
    28d4:	1b c0       	rjmp	.+54     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 8:
		return 'x';
    28d6:	88 e7       	ldi	r24, 0x78	; 120
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	18 c0       	rjmp	.+48     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 9:
		return 1;
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	15 c0       	rjmp	.+42     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 10:
		return 2;
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	2a 83       	std	Y+2, r18	; 0x02
    28e6:	12 c0       	rjmp	.+36     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 11:
		return 3;
    28e8:	33 e0       	ldi	r19, 0x03	; 3
    28ea:	3a 83       	std	Y+2, r19	; 0x02
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 12:
		return '-';
    28ee:	8d e2       	ldi	r24, 0x2D	; 45
    28f0:	8a 83       	std	Y+2, r24	; 0x02
    28f2:	0c c0       	rjmp	.+24     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 13:
		return 0;
    28f4:	1a 82       	std	Y+2, r1	; 0x02
    28f6:	0a c0       	rjmp	.+20     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 14:
		return 0;
    28f8:	1a 82       	std	Y+2, r1	; 0x02
    28fa:	08 c0       	rjmp	.+16     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 15:
		return '=';
    28fc:	9d e3       	ldi	r25, 0x3D	; 61
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	05 c0       	rjmp	.+10     	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>
	case 16:
		return '+';
    2902:	2b e2       	ldi	r18, 0x2B	; 43
    2904:	2a 83       	std	Y+2, r18	; 0x02
    2906:	02 c0       	rjmp	.+4      	; 0x290c <KEYPAD_rev4x4_adjustKey+0x138>

	default :
		return num;
    2908:	39 81       	ldd	r19, Y+1	; 0x01
    290a:	3a 83       	std	Y+2, r19	; 0x02
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
	}//end switch
}//end rev4x4
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <main>:

/***************************************************************************
 *                               APPLICATION
 *****************************************************************************/

int main(void){
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	61 97       	sbiw	r28, 0x11	; 17
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61

	SREG_R.bit.I_bit = 1;
    2930:	ef e5       	ldi	r30, 0x5F	; 95
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	80 68       	ori	r24, 0x80	; 128
    2938:	80 83       	st	Z, r24

	/* Variable containing  open door option or change password option */
	uint8 option;

	UART_init(&g_UART_configurations);
    293a:	88 ee       	ldi	r24, 0xE8	; 232
    293c:	91 e0       	ldi	r25, 0x01	; 1
    293e:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>
	LCD_init();
    2942:	0e 94 b2 11 	call	0x2364	; 0x2364 <LCD_init>
	LCD_moveCursor(0,0);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>

	g_TIMER1_configurations.mode = COMPARE;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	80 93 fc 01 	sts	0x01FC, r24
	g_TIMER1_configurations.prescaler = FACTOR1024;
    2954:	85 e0       	ldi	r24, 0x05	; 5
    2956:	80 93 fd 01 	sts	0x01FD, r24
	g_TIMER1_configurations.compare_value = 23500; /* 3 SECONDS */
    295a:	8c ec       	ldi	r24, 0xCC	; 204
    295c:	9b e5       	ldi	r25, 0x5B	; 91
    295e:	90 93 01 02 	sts	0x0201, r25
    2962:	80 93 00 02 	sts	0x0200, r24
	g_TIMER1_configurations.initial_value = 0;
    2966:	10 92 ff 01 	sts	0x01FF, r1
    296a:	10 92 fe 01 	sts	0x01FE, r1

	/* Go to first state */
	currentState = CREATE_PASSWORD;
    296e:	10 92 f1 01 	sts	0x01F1, r1

	while(1){

		switch(currentState){
    2972:	80 91 f1 01 	lds	r24, 0x01F1
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	39 8b       	std	Y+17, r19	; 0x11
    297c:	28 8b       	std	Y+16, r18	; 0x10
    297e:	88 89       	ldd	r24, Y+16	; 0x10
    2980:	99 89       	ldd	r25, Y+17	; 0x11
    2982:	82 30       	cpi	r24, 0x02	; 2
    2984:	91 05       	cpc	r25, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <main+0x6e>
    2988:	d5 c0       	rjmp	.+426    	; 0x2b34 <main+0x218>
    298a:	28 89       	ldd	r18, Y+16	; 0x10
    298c:	39 89       	ldd	r19, Y+17	; 0x11
    298e:	23 30       	cpi	r18, 0x03	; 3
    2990:	31 05       	cpc	r19, r1
    2992:	54 f4       	brge	.+20     	; 0x29a8 <main+0x8c>
    2994:	88 89       	ldd	r24, Y+16	; 0x10
    2996:	99 89       	ldd	r25, Y+17	; 0x11
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	99 f0       	breq	.+38     	; 0x29c2 <main+0xa6>
    299c:	28 89       	ldd	r18, Y+16	; 0x10
    299e:	39 89       	ldd	r19, Y+17	; 0x11
    29a0:	21 30       	cpi	r18, 0x01	; 1
    29a2:	31 05       	cpc	r19, r1
    29a4:	11 f1       	breq	.+68     	; 0x29ea <main+0xce>
    29a6:	e5 cf       	rjmp	.-54     	; 0x2972 <main+0x56>
    29a8:	88 89       	ldd	r24, Y+16	; 0x10
    29aa:	99 89       	ldd	r25, Y+17	; 0x11
    29ac:	84 30       	cpi	r24, 0x04	; 4
    29ae:	91 05       	cpc	r25, r1
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <main+0x98>
    29b2:	ab c0       	rjmp	.+342    	; 0x2b0a <main+0x1ee>
    29b4:	28 89       	ldd	r18, Y+16	; 0x10
    29b6:	39 89       	ldd	r19, Y+17	; 0x11
    29b8:	24 30       	cpi	r18, 0x04	; 4
    29ba:	31 05       	cpc	r19, r1
    29bc:	0c f4       	brge	.+2      	; 0x29c0 <main+0xa4>
    29be:	ce c0       	rjmp	.+412    	; 0x2b5c <main+0x240>
    29c0:	d8 cf       	rjmp	.-80     	; 0x2972 <main+0x56>

		case CREATE_PASSWORD:

			APP_createPassword(g_password1,g_password2);
    29c2:	87 ef       	ldi	r24, 0xF7	; 247
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	2a e0       	ldi	r18, 0x0A	; 10
    29c8:	32 e0       	ldi	r19, 0x02	; 2
    29ca:	b9 01       	movw	r22, r18
    29cc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <APP_createPassword>

			/* Send first password to control ECU */
			APP_sendPassword(g_password1);
    29d0:	87 ef       	ldi	r24, 0xF7	; 247
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	0e 94 05 18 	call	0x300a	; 0x300a <APP_sendPassword>

			/* Send second password to control ECU */
			APP_sendPassword(g_password2);
    29d8:	8a e0       	ldi	r24, 0x0A	; 10
    29da:	92 e0       	ldi	r25, 0x02	; 2
    29dc:	0e 94 05 18 	call	0x300a	; 0x300a <APP_sendPassword>

			/* Receive the control ECU decision */
			currentState = UART_receiveByte();
    29e0:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_receiveByte>
    29e4:	80 93 f1 01 	sts	0x01F1, r24
    29e8:	c4 cf       	rjmp	.-120    	; 0x2972 <main+0x56>

			break;

		case MAIN_OPTIONS:

			LCD_clearScreen();
    29ea:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
			LCD_displayStringRowColumn("+ : open Door",0,0);
    29ee:	80 e6       	ldi	r24, 0x60	; 96
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn("- : change pass",1,0);
    29fa:	8e e6       	ldi	r24, 0x6E	; 110
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>

			/* Not allowing any value except the two options */
			do
			{
				option = KEYPAD_getPressedKey();
    2a06:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    2a0a:	8f 87       	std	Y+15, r24	; 0x0f

			}while(option != '+' && option != '-');
    2a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a0e:	8b 32       	cpi	r24, 0x2B	; 43
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <main+0xfc>
    2a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a14:	8d 32       	cpi	r24, 0x2D	; 45
    2a16:	b9 f7       	brne	.-18     	; 0x2a06 <main+0xea>

			/* Send the option to control ECU to make decision */
			UART_sendByte(option);
    2a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1a:	0e 94 a8 07 	call	0xf50	; 0xf50 <UART_sendByte>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	a8 ec       	ldi	r26, 0xC8	; 200
    2a24:	b3 e4       	ldi	r27, 0x43	; 67
    2a26:	8b 87       	std	Y+11, r24	; 0x0b
    2a28:	9c 87       	std	Y+12, r25	; 0x0c
    2a2a:	ad 87       	std	Y+13, r26	; 0x0d
    2a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	4a ef       	ldi	r20, 0xFA	; 250
    2a3c:	54 e4       	ldi	r21, 0x44	; 68
    2a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	8f 83       	std	Y+7, r24	; 0x07
    2a48:	98 87       	std	Y+8, r25	; 0x08
    2a4a:	a9 87       	std	Y+9, r26	; 0x09
    2a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a50:	78 85       	ldd	r23, Y+8	; 0x08
    2a52:	89 85       	ldd	r24, Y+9	; 0x09
    2a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	5f e3       	ldi	r21, 0x3F	; 63
    2a5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a62:	88 23       	and	r24, r24
    2a64:	2c f4       	brge	.+10     	; 0x2a70 <main+0x154>
		__ticks = 1;
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
    2a6e:	3f c0       	rjmp	.+126    	; 0x2aee <main+0x1d2>
	else if (__tmp > 65535)
    2a70:	6f 81       	ldd	r22, Y+7	; 0x07
    2a72:	78 85       	ldd	r23, Y+8	; 0x08
    2a74:	89 85       	ldd	r24, Y+9	; 0x09
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	3f ef       	ldi	r19, 0xFF	; 255
    2a7c:	4f e7       	ldi	r20, 0x7F	; 127
    2a7e:	57 e4       	ldi	r21, 0x47	; 71
    2a80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a84:	18 16       	cp	r1, r24
    2a86:	4c f5       	brge	.+82     	; 0x2ada <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e2       	ldi	r20, 0x20	; 32
    2a96:	51 e4       	ldi	r21, 0x41	; 65
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <main+0x1b4>
    2ab2:	88 ec       	ldi	r24, 0xC8	; 200
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	9c 81       	ldd	r25, Y+4	; 0x04
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <main+0x1a2>
    2ac2:	9c 83       	std	Y+4, r25	; 0x04
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	69 f7       	brne	.-38     	; 0x2ab2 <main+0x196>
    2ad8:	14 c0       	rjmp	.+40     	; 0x2b02 <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ada:	6f 81       	ldd	r22, Y+7	; 0x07
    2adc:	78 85       	ldd	r23, Y+8	; 0x08
    2ade:	89 85       	ldd	r24, Y+9	; 0x09
    2ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	8d 81       	ldd	r24, Y+5	; 0x05
    2af0:	9e 81       	ldd	r25, Y+6	; 0x06
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <main+0x1de>
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400);

			/* Go to enter password state */
			currentState = ENTER_PASSWORD;
    2b02:	84 e0       	ldi	r24, 0x04	; 4
    2b04:	80 93 f1 01 	sts	0x01F1, r24
    2b08:	34 cf       	rjmp	.-408    	; 0x2972 <main+0x56>

			break;

		case ENTER_PASSWORD:

			if(option == '+')
    2b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0c:	8b 32       	cpi	r24, 0x2B	; 43
    2b0e:	39 f4       	brne	.+14     	; 0x2b1e <main+0x202>
			{
				/* Send entered password the wait for ECU decision */
				APP_plzEnterPassword();
    2b10:	0e 94 52 18 	call	0x30a4	; 0x30a4 <APP_plzEnterPassword>
				currentState = UART_receiveByte();
    2b14:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_receiveByte>
    2b18:	80 93 f1 01 	sts	0x01F1, r24
    2b1c:	2a cf       	rjmp	.-428    	; 0x2972 <main+0x56>
			}
			else if(option == '-')
    2b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b20:	8d 32       	cpi	r24, 0x2D	; 45
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <main+0x20a>
    2b24:	26 cf       	rjmp	.-436    	; 0x2972 <main+0x56>
			{
				/* Send entered password the wait for ECU decision */
				APP_plzEnterPassword();
    2b26:	0e 94 52 18 	call	0x30a4	; 0x30a4 <APP_plzEnterPassword>
				currentState = UART_receiveByte();
    2b2a:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_receiveByte>
    2b2e:	80 93 f1 01 	sts	0x01F1, r24
    2b32:	1f cf       	rjmp	.-450    	; 0x2972 <main+0x56>
			}

			break;

		case OPEN_DOOR:
			LCD_clearScreen();
    2b34:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
			LCD_displayStringRowColumn("Door unlocking",0,0);
    2b38:	8e e7       	ldi	r24, 0x7E	; 126
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>

			TIMER1_setCallBack(APP_gateControl);
    2b44:	8b e7       	ldi	r24, 0x7B	; 123
    2b46:	99 e1       	ldi	r25, 0x19	; 25
    2b48:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <TIMER1_setCallBack>
			TIMER1_init(&g_TIMER1_configurations);
    2b4c:	8c ef       	ldi	r24, 0xFC	; 252
    2b4e:	91 e0       	ldi	r25, 0x01	; 1
    2b50:	0e 94 0e 0c 	call	0x181c	; 0x181c <TIMER1_init>

			currentState = UNLOCKING_DOOR;
    2b54:	85 e0       	ldi	r24, 0x05	; 5
    2b56:	80 93 f1 01 	sts	0x01F1, r24
    2b5a:	0b cf       	rjmp	.-490    	; 0x2972 <main+0x56>
		case UNLOCKING_DOOR:
			break;

		case WRONG_PASSWORD:

			LCD_clearScreen();
    2b5c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
			LCD_displayStringRowColumn("ERROR",0,0);
    2b60:	8d e8       	ldi	r24, 0x8D	; 141
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
			TIMER1_setCallBack(APP_errorControl);
    2b6c:	8c ea       	ldi	r24, 0xAC	; 172
    2b6e:	99 e1       	ldi	r25, 0x19	; 25
    2b70:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <TIMER1_setCallBack>
			g_TIMER1_configurations.compare_value = 47000; /* 6 SECONDS */
    2b74:	88 e9       	ldi	r24, 0x98	; 152
    2b76:	97 eb       	ldi	r25, 0xB7	; 183
    2b78:	90 93 01 02 	sts	0x0201, r25
    2b7c:	80 93 00 02 	sts	0x0200, r24
			TIMER1_init(&g_TIMER1_configurations);
    2b80:	8c ef       	ldi	r24, 0xFC	; 252
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	0e 94 0e 0c 	call	0x181c	; 0x181c <TIMER1_init>

			currentState = ERROR_STATE;
    2b88:	86 e0       	ldi	r24, 0x06	; 6
    2b8a:	80 93 f1 01 	sts	0x01F1, r24
    2b8e:	f1 ce       	rjmp	.-542    	; 0x2972 <main+0x56>

00002b90 <APP_createPassword>:
 *****************************************************************************/

/*
 * Function takes two passwords from user then send them to the control ECU
 */
void APP_createPassword(uint8* pass1,uint8*pass2){
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	ec 97       	sbiw	r28, 0x3c	; 60
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	9a af       	std	Y+58, r25	; 0x3a
    2baa:	89 af       	std	Y+57, r24	; 0x39
    2bac:	7c af       	std	Y+60, r23	; 0x3c
    2bae:	6b af       	std	Y+59, r22	; 0x3b
	/*
	 *  Take password for first time and save it in global array
	 * g_password1
	 */
	LCD_clearScreen();
    2bb0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
	LCD_displayStringRowColumn("plz enter pass:",0,0);
    2bb4:	83 e9       	ldi	r24, 0x93	; 147
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
	for(i=0;i<5;i++){
    2bc8:	10 92 04 02 	sts	0x0204, r1
    2bcc:	87 c0       	rjmp	.+270    	; 0x2cdc <APP_createPassword+0x14c>
		pass1[i] = KEYPAD_getPressedKey();
    2bce:	80 91 04 02 	lds	r24, 0x0204
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bda:	8c 01       	movw	r16, r24
    2bdc:	02 0f       	add	r16, r18
    2bde:	13 1f       	adc	r17, r19
    2be0:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    2be4:	f8 01       	movw	r30, r16
    2be6:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2be8:	8a e2       	ldi	r24, 0x2A	; 42
    2bea:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_displayCharacter>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	aa ef       	ldi	r26, 0xFA	; 250
    2bf4:	b3 e4       	ldi	r27, 0x43	; 67
    2bf6:	8d ab       	std	Y+53, r24	; 0x35
    2bf8:	9e ab       	std	Y+54, r25	; 0x36
    2bfa:	af ab       	std	Y+55, r26	; 0x37
    2bfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	6d a9       	ldd	r22, Y+53	; 0x35
    2c00:	7e a9       	ldd	r23, Y+54	; 0x36
    2c02:	8f a9       	ldd	r24, Y+55	; 0x37
    2c04:	98 ad       	ldd	r25, Y+56	; 0x38
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a ef       	ldi	r20, 0xFA	; 250
    2c0c:	54 e4       	ldi	r21, 0x44	; 68
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	89 ab       	std	Y+49, r24	; 0x31
    2c18:	9a ab       	std	Y+50, r25	; 0x32
    2c1a:	ab ab       	std	Y+51, r26	; 0x33
    2c1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c20:	7a a9       	ldd	r23, Y+50	; 0x32
    2c22:	8b a9       	ldd	r24, Y+51	; 0x33
    2c24:	9c a9       	ldd	r25, Y+52	; 0x34
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	2c f4       	brge	.+10     	; 0x2c40 <APP_createPassword+0xb0>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	98 ab       	std	Y+48, r25	; 0x30
    2c3c:	8f a7       	std	Y+47, r24	; 0x2f
    2c3e:	3f c0       	rjmp	.+126    	; 0x2cbe <APP_createPassword+0x12e>
	else if (__tmp > 65535)
    2c40:	69 a9       	ldd	r22, Y+49	; 0x31
    2c42:	7a a9       	ldd	r23, Y+50	; 0x32
    2c44:	8b a9       	ldd	r24, Y+51	; 0x33
    2c46:	9c a9       	ldd	r25, Y+52	; 0x34
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	4c f5       	brge	.+82     	; 0x2caa <APP_createPassword+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	6d a9       	ldd	r22, Y+53	; 0x35
    2c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	98 ab       	std	Y+48, r25	; 0x30
    2c7e:	8f a7       	std	Y+47, r24	; 0x2f
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <APP_createPassword+0x110>
    2c82:	88 ec       	ldi	r24, 0xC8	; 200
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e a7       	std	Y+46, r25	; 0x2e
    2c88:	8d a7       	std	Y+45, r24	; 0x2d
    2c8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <APP_createPassword+0xfe>
    2c92:	9e a7       	std	Y+46, r25	; 0x2e
    2c94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c98:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	98 ab       	std	Y+48, r25	; 0x30
    2c9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	69 f7       	brne	.-38     	; 0x2c82 <APP_createPassword+0xf2>
    2ca8:	14 c0       	rjmp	.+40     	; 0x2cd2 <APP_createPassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2caa:	69 a9       	ldd	r22, Y+49	; 0x31
    2cac:	7a a9       	ldd	r23, Y+50	; 0x32
    2cae:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	98 ab       	std	Y+48, r25	; 0x30
    2cbc:	8f a7       	std	Y+47, r24	; 0x2f
    2cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc2:	9c a7       	std	Y+44, r25	; 0x2c
    2cc4:	8b a7       	std	Y+43, r24	; 0x2b
    2cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <APP_createPassword+0x13a>
    2cce:	9c a7       	std	Y+44, r25	; 0x2c
    2cd0:	8b a7       	std	Y+43, r24	; 0x2b
	 * g_password1
	 */
	LCD_clearScreen();
	LCD_displayStringRowColumn("plz enter pass:",0,0);
	LCD_moveCursor(1,0);
	for(i=0;i<5;i++){
    2cd2:	80 91 04 02 	lds	r24, 0x0204
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	80 93 04 02 	sts	0x0204, r24
    2cdc:	80 91 04 02 	lds	r24, 0x0204
    2ce0:	85 30       	cpi	r24, 0x05	; 5
    2ce2:	08 f4       	brcc	.+2      	; 0x2ce6 <APP_createPassword+0x156>
    2ce4:	74 cf       	rjmp	.-280    	; 0x2bce <APP_createPassword+0x3e>
		pass1[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	/* Stuck till user press enter key ( = ) */
	while(KEYPAD_getPressedKey() != '=');
    2ce6:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    2cea:	8d 33       	cpi	r24, 0x3D	; 61
    2cec:	e1 f7       	brne	.-8      	; 0x2ce6 <APP_createPassword+0x156>
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	aa ef       	ldi	r26, 0xFA	; 250
    2cf4:	b3 e4       	ldi	r27, 0x43	; 67
    2cf6:	8f a3       	std	Y+39, r24	; 0x27
    2cf8:	98 a7       	std	Y+40, r25	; 0x28
    2cfa:	a9 a7       	std	Y+41, r26	; 0x29
    2cfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    2d00:	78 a5       	ldd	r23, Y+40	; 0x28
    2d02:	89 a5       	ldd	r24, Y+41	; 0x29
    2d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4a ef       	ldi	r20, 0xFA	; 250
    2d0c:	54 e4       	ldi	r21, 0x44	; 68
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	8b a3       	std	Y+35, r24	; 0x23
    2d18:	9c a3       	std	Y+36, r25	; 0x24
    2d1a:	ad a3       	std	Y+37, r26	; 0x25
    2d1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d20:	7c a1       	ldd	r23, Y+36	; 0x24
    2d22:	8d a1       	ldd	r24, Y+37	; 0x25
    2d24:	9e a1       	ldd	r25, Y+38	; 0x26
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	2c f4       	brge	.+10     	; 0x2d40 <APP_createPassword+0x1b0>
		__ticks = 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9a a3       	std	Y+34, r25	; 0x22
    2d3c:	89 a3       	std	Y+33, r24	; 0x21
    2d3e:	3f c0       	rjmp	.+126    	; 0x2dbe <APP_createPassword+0x22e>
	else if (__tmp > 65535)
    2d40:	6b a1       	ldd	r22, Y+35	; 0x23
    2d42:	7c a1       	ldd	r23, Y+36	; 0x24
    2d44:	8d a1       	ldd	r24, Y+37	; 0x25
    2d46:	9e a1       	ldd	r25, Y+38	; 0x26
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	4c f5       	brge	.+82     	; 0x2daa <APP_createPassword+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d58:	6f a1       	ldd	r22, Y+39	; 0x27
    2d5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9a a3       	std	Y+34, r25	; 0x22
    2d7e:	89 a3       	std	Y+33, r24	; 0x21
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <APP_createPassword+0x210>
    2d82:	88 ec       	ldi	r24, 0xC8	; 200
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	98 a3       	std	Y+32, r25	; 0x20
    2d88:	8f 8f       	std	Y+31, r24	; 0x1f
    2d8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <APP_createPassword+0x1fe>
    2d92:	98 a3       	std	Y+32, r25	; 0x20
    2d94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	89 a1       	ldd	r24, Y+33	; 0x21
    2d98:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	9a a3       	std	Y+34, r25	; 0x22
    2d9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	9a a1       	ldd	r25, Y+34	; 0x22
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	69 f7       	brne	.-38     	; 0x2d82 <APP_createPassword+0x1f2>
    2da8:	14 c0       	rjmp	.+40     	; 0x2dd2 <APP_createPassword+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2daa:	6b a1       	ldd	r22, Y+35	; 0x23
    2dac:	7c a1       	ldd	r23, Y+36	; 0x24
    2dae:	8d a1       	ldd	r24, Y+37	; 0x25
    2db0:	9e a1       	ldd	r25, Y+38	; 0x26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9a a3       	std	Y+34, r25	; 0x22
    2dbc:	89 a3       	std	Y+33, r24	; 0x21
    2dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc2:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc4:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <APP_createPassword+0x23a>
    2dce:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	/* Take password for second time and save it in global array
	 * g_password2
	 *  */
	LCD_displayStringRowColumn("plz re-enter the",0,0);
    2dd2:	83 ea       	ldi	r24, 0xA3	; 163
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("same pass:",1,0);
    2dde:	84 eb       	ldi	r24, 0xB4	; 180
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	61 e0       	ldi	r22, 0x01	; 1
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
	for(i=0;i<5;i++){
    2dea:	10 92 04 02 	sts	0x0204, r1
    2dee:	87 c0       	rjmp	.+270    	; 0x2efe <APP_createPassword+0x36e>
		pass2[i] = KEYPAD_getPressedKey();
    2df0:	80 91 04 02 	lds	r24, 0x0204
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dfa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	02 0f       	add	r16, r18
    2e00:	13 1f       	adc	r17, r19
    2e02:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2e0a:	8a e2       	ldi	r24, 0x2A	; 42
    2e0c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_displayCharacter>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	aa ef       	ldi	r26, 0xFA	; 250
    2e16:	b3 e4       	ldi	r27, 0x43	; 67
    2e18:	89 8f       	std	Y+25, r24	; 0x19
    2e1a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e1c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	69 8d       	ldd	r22, Y+25	; 0x19
    2e22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8d 8b       	std	Y+21, r24	; 0x15
    2e3a:	9e 8b       	std	Y+22, r25	; 0x16
    2e3c:	af 8b       	std	Y+23, r26	; 0x17
    2e3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e40:	6d 89       	ldd	r22, Y+21	; 0x15
    2e42:	7e 89       	ldd	r23, Y+22	; 0x16
    2e44:	8f 89       	ldd	r24, Y+23	; 0x17
    2e46:	98 8d       	ldd	r25, Y+24	; 0x18
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <APP_createPassword+0x2d2>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9c 8b       	std	Y+20, r25	; 0x14
    2e5e:	8b 8b       	std	Y+19, r24	; 0x13
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <APP_createPassword+0x350>
	else if (__tmp > 65535)
    2e62:	6d 89       	ldd	r22, Y+21	; 0x15
    2e64:	7e 89       	ldd	r23, Y+22	; 0x16
    2e66:	8f 89       	ldd	r24, Y+23	; 0x17
    2e68:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <APP_createPassword+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ea0:	8b 8b       	std	Y+19, r24	; 0x13
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <APP_createPassword+0x332>
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9a 8b       	std	Y+18, r25	; 0x12
    2eaa:	89 8b       	std	Y+17, r24	; 0x11
    2eac:	89 89       	ldd	r24, Y+17	; 0x11
    2eae:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <APP_createPassword+0x320>
    2eb4:	9a 8b       	std	Y+18, r25	; 0x12
    2eb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eba:	9c 89       	ldd	r25, Y+20	; 0x14
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9c 8b       	std	Y+20, r25	; 0x14
    2ec0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <APP_createPassword+0x314>
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <APP_createPassword+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ece:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
    2ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee4:	98 8b       	std	Y+16, r25	; 0x10
    2ee6:	8f 87       	std	Y+15, r24	; 0x0f
    2ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eea:	98 89       	ldd	r25, Y+16	; 0x10
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <APP_createPassword+0x35c>
    2ef0:	98 8b       	std	Y+16, r25	; 0x10
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f
	/* Take password for second time and save it in global array
	 * g_password2
	 *  */
	LCD_displayStringRowColumn("plz re-enter the",0,0);
	LCD_displayStringRowColumn("same pass:",1,0);
	for(i=0;i<5;i++){
    2ef4:	80 91 04 02 	lds	r24, 0x0204
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	80 93 04 02 	sts	0x0204, r24
    2efe:	80 91 04 02 	lds	r24, 0x0204
    2f02:	85 30       	cpi	r24, 0x05	; 5
    2f04:	08 f4       	brcc	.+2      	; 0x2f08 <APP_createPassword+0x378>
    2f06:	74 cf       	rjmp	.-280    	; 0x2df0 <APP_createPassword+0x260>
		pass2[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	/* Stuck till user press enter key ( = ) */
	while(KEYPAD_getPressedKey() != '=');
    2f08:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    2f0c:	8d 33       	cpi	r24, 0x3D	; 61
    2f0e:	e1 f7       	brne	.-8      	; 0x2f08 <APP_createPassword+0x378>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	aa ef       	ldi	r26, 0xFA	; 250
    2f16:	b3 e4       	ldi	r27, 0x43	; 67
    2f18:	8b 87       	std	Y+11, r24	; 0x0b
    2f1a:	9c 87       	std	Y+12, r25	; 0x0c
    2f1c:	ad 87       	std	Y+13, r26	; 0x0d
    2f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8f 83       	std	Y+7, r24	; 0x07
    2f3a:	98 87       	std	Y+8, r25	; 0x08
    2f3c:	a9 87       	std	Y+9, r26	; 0x09
    2f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f40:	6f 81       	ldd	r22, Y+7	; 0x07
    2f42:	78 85       	ldd	r23, Y+8	; 0x08
    2f44:	89 85       	ldd	r24, Y+9	; 0x09
    2f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <APP_createPassword+0x3d2>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <APP_createPassword+0x450>
	else if (__tmp > 65535)
    2f62:	6f 81       	ldd	r22, Y+7	; 0x07
    2f64:	78 85       	ldd	r23, Y+8	; 0x08
    2f66:	89 85       	ldd	r24, Y+9	; 0x09
    2f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <APP_createPassword+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <APP_createPassword+0x432>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9c 83       	std	Y+4, r25	; 0x04
    2faa:	8b 83       	std	Y+3, r24	; 0x03
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <APP_createPassword+0x420>
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <APP_createPassword+0x414>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <APP_createPassword+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <APP_createPassword+0x45c>
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2ff4:	ec 96       	adiw	r28, 0x3c	; 60
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	08 95       	ret

0000300a <APP_sendPassword>:


void APP_sendPassword(uint8* pass){
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <APP_sendPassword+0x6>
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	9a 83       	std	Y+2, r25	; 0x02
    3016:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Send the password
	 */
	for(i=0;i<5;i++){
    3018:	10 92 04 02 	sts	0x0204, r1
    301c:	11 c0       	rjmp	.+34     	; 0x3040 <APP_sendPassword+0x36>
		UART_sendByte(pass[i]);
    301e:	80 91 04 02 	lds	r24, 0x0204
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	fc 01       	movw	r30, r24
    302c:	e2 0f       	add	r30, r18
    302e:	f3 1f       	adc	r31, r19
    3030:	80 81       	ld	r24, Z
    3032:	0e 94 a8 07 	call	0xf50	; 0xf50 <UART_sendByte>
void APP_sendPassword(uint8* pass){

	/*
	 * Send the password
	 */
	for(i=0;i<5;i++){
    3036:	80 91 04 02 	lds	r24, 0x0204
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	80 93 04 02 	sts	0x0204, r24
    3040:	80 91 04 02 	lds	r24, 0x0204
    3044:	85 30       	cpi	r24, 0x05	; 5
    3046:	58 f3       	brcs	.-42     	; 0x301e <APP_sendPassword+0x14>
		UART_sendByte(pass[i]);
	}
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <APP_receivePassword>:


void APP_receivePassword(uint8* pass){
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <APP_receivePassword+0xa>
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	9a 83       	std	Y+2, r25	; 0x02
    3062:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Receive password
	 */
	for(i=0;i<5;i++){
    3064:	10 92 04 02 	sts	0x0204, r1
    3068:	12 c0       	rjmp	.+36     	; 0x308e <APP_receivePassword+0x3c>
		pass[i] = UART_receiveByte();
    306a:	80 91 04 02 	lds	r24, 0x0204
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	8c 01       	movw	r16, r24
    3078:	02 0f       	add	r16, r18
    307a:	13 1f       	adc	r17, r19
    307c:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_receiveByte>
    3080:	f8 01       	movw	r30, r16
    3082:	80 83       	st	Z, r24
void APP_receivePassword(uint8* pass){

	/*
	 * Receive password
	 */
	for(i=0;i<5;i++){
    3084:	80 91 04 02 	lds	r24, 0x0204
    3088:	8f 5f       	subi	r24, 0xFF	; 255
    308a:	80 93 04 02 	sts	0x0204, r24
    308e:	80 91 04 02 	lds	r24, 0x0204
    3092:	85 30       	cpi	r24, 0x05	; 5
    3094:	50 f3       	brcs	.-44     	; 0x306a <APP_receivePassword+0x18>
		pass[i] = UART_receiveByte();
	}
}
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <APP_plzEnterPassword>:

/*
 * Function takes password from user and save it in g_enteredPassword
 * then send it to the control ECU
 */
void APP_plzEnterPassword(void){
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	6c 97       	sbiw	r28, 0x1c	; 28
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    30bc:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
	LCD_displayStringRowColumn("plz enter pass:",0,0);
    30c0:	83 e9       	ldi	r24, 0x93	; 147
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	60 e0       	ldi	r22, 0x00	; 0
    30c6:	40 e0       	ldi	r20, 0x00	; 0
    30c8:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
	for(i=0;i<5;i++){
    30d4:	10 92 04 02 	sts	0x0204, r1
    30d8:	84 c0       	rjmp	.+264    	; 0x31e2 <APP_plzEnterPassword+0x13e>
		g_enteredPassword[i] = KEYPAD_getPressedKey();
    30da:	80 91 04 02 	lds	r24, 0x0204
    30de:	08 2f       	mov	r16, r24
    30e0:	10 e0       	ldi	r17, 0x00	; 0
    30e2:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    30e6:	f8 01       	movw	r30, r16
    30e8:	ee 50       	subi	r30, 0x0E	; 14
    30ea:	fe 4f       	sbci	r31, 0xFE	; 254
    30ec:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    30ee:	8a e2       	ldi	r24, 0x2A	; 42
    30f0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_displayCharacter>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	aa ef       	ldi	r26, 0xFA	; 250
    30fa:	b3 e4       	ldi	r27, 0x43	; 67
    30fc:	89 8f       	std	Y+25, r24	; 0x19
    30fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3100:	ab 8f       	std	Y+27, r26	; 0x1b
    3102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3104:	69 8d       	ldd	r22, Y+25	; 0x19
    3106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a ef       	ldi	r20, 0xFA	; 250
    3112:	54 e4       	ldi	r21, 0x44	; 68
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	8d 8b       	std	Y+21, r24	; 0x15
    311e:	9e 8b       	std	Y+22, r25	; 0x16
    3120:	af 8b       	std	Y+23, r26	; 0x17
    3122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3124:	6d 89       	ldd	r22, Y+21	; 0x15
    3126:	7e 89       	ldd	r23, Y+22	; 0x16
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	98 8d       	ldd	r25, Y+24	; 0x18
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3138:	88 23       	and	r24, r24
    313a:	2c f4       	brge	.+10     	; 0x3146 <APP_plzEnterPassword+0xa2>
		__ticks = 1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9c 8b       	std	Y+20, r25	; 0x14
    3142:	8b 8b       	std	Y+19, r24	; 0x13
    3144:	3f c0       	rjmp	.+126    	; 0x31c4 <APP_plzEnterPassword+0x120>
	else if (__tmp > 65535)
    3146:	6d 89       	ldd	r22, Y+21	; 0x15
    3148:	7e 89       	ldd	r23, Y+22	; 0x16
    314a:	8f 89       	ldd	r24, Y+23	; 0x17
    314c:	98 8d       	ldd	r25, Y+24	; 0x18
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	3f ef       	ldi	r19, 0xFF	; 255
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	57 e4       	ldi	r21, 0x47	; 71
    3156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315a:	18 16       	cp	r1, r24
    315c:	4c f5       	brge	.+82     	; 0x31b0 <APP_plzEnterPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315e:	69 8d       	ldd	r22, Y+25	; 0x19
    3160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e2       	ldi	r20, 0x20	; 32
    316c:	51 e4       	ldi	r21, 0x41	; 65
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9c 8b       	std	Y+20, r25	; 0x14
    3184:	8b 8b       	std	Y+19, r24	; 0x13
    3186:	0f c0       	rjmp	.+30     	; 0x31a6 <APP_plzEnterPassword+0x102>
    3188:	88 ec       	ldi	r24, 0xC8	; 200
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9a 8b       	std	Y+18, r25	; 0x12
    318e:	89 8b       	std	Y+17, r24	; 0x11
    3190:	89 89       	ldd	r24, Y+17	; 0x11
    3192:	9a 89       	ldd	r25, Y+18	; 0x12
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <APP_plzEnterPassword+0xf0>
    3198:	9a 8b       	std	Y+18, r25	; 0x12
    319a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319c:	8b 89       	ldd	r24, Y+19	; 0x13
    319e:	9c 89       	ldd	r25, Y+20	; 0x14
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	9c 8b       	std	Y+20, r25	; 0x14
    31a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a6:	8b 89       	ldd	r24, Y+19	; 0x13
    31a8:	9c 89       	ldd	r25, Y+20	; 0x14
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	69 f7       	brne	.-38     	; 0x3188 <APP_plzEnterPassword+0xe4>
    31ae:	14 c0       	rjmp	.+40     	; 0x31d8 <APP_plzEnterPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b0:	6d 89       	ldd	r22, Y+21	; 0x15
    31b2:	7e 89       	ldd	r23, Y+22	; 0x16
    31b4:	8f 89       	ldd	r24, Y+23	; 0x17
    31b6:	98 8d       	ldd	r25, Y+24	; 0x18
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9c 8b       	std	Y+20, r25	; 0x14
    31c2:	8b 8b       	std	Y+19, r24	; 0x13
    31c4:	8b 89       	ldd	r24, Y+19	; 0x13
    31c6:	9c 89       	ldd	r25, Y+20	; 0x14
    31c8:	98 8b       	std	Y+16, r25	; 0x10
    31ca:	8f 87       	std	Y+15, r24	; 0x0f
    31cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ce:	98 89       	ldd	r25, Y+16	; 0x10
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <APP_plzEnterPassword+0x12c>
    31d4:	98 8b       	std	Y+16, r25	; 0x10
    31d6:	8f 87       	std	Y+15, r24	; 0x0f
void APP_plzEnterPassword(void){

	LCD_clearScreen();
	LCD_displayStringRowColumn("plz enter pass:",0,0);
	LCD_moveCursor(1,0);
	for(i=0;i<5;i++){
    31d8:	80 91 04 02 	lds	r24, 0x0204
    31dc:	8f 5f       	subi	r24, 0xFF	; 255
    31de:	80 93 04 02 	sts	0x0204, r24
    31e2:	80 91 04 02 	lds	r24, 0x0204
    31e6:	85 30       	cpi	r24, 0x05	; 5
    31e8:	08 f4       	brcc	.+2      	; 0x31ec <APP_plzEnterPassword+0x148>
    31ea:	77 cf       	rjmp	.-274    	; 0x30da <APP_plzEnterPassword+0x36>
		g_enteredPassword[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	/* Stuck till user press enter key ( = ) */
	while(KEYPAD_getPressedKey() != '=');
    31ec:	0e 94 06 13 	call	0x260c	; 0x260c <KEYPAD_getPressedKey>
    31f0:	8d 33       	cpi	r24, 0x3D	; 61
    31f2:	e1 f7       	brne	.-8      	; 0x31ec <APP_plzEnterPassword+0x148>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	aa ef       	ldi	r26, 0xFA	; 250
    31fa:	b3 e4       	ldi	r27, 0x43	; 67
    31fc:	8b 87       	std	Y+11, r24	; 0x0b
    31fe:	9c 87       	std	Y+12, r25	; 0x0c
    3200:	ad 87       	std	Y+13, r26	; 0x0d
    3202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3204:	6b 85       	ldd	r22, Y+11	; 0x0b
    3206:	7c 85       	ldd	r23, Y+12	; 0x0c
    3208:	8d 85       	ldd	r24, Y+13	; 0x0d
    320a:	9e 85       	ldd	r25, Y+14	; 0x0e
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a ef       	ldi	r20, 0xFA	; 250
    3212:	54 e4       	ldi	r21, 0x44	; 68
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	8f 83       	std	Y+7, r24	; 0x07
    321e:	98 87       	std	Y+8, r25	; 0x08
    3220:	a9 87       	std	Y+9, r26	; 0x09
    3222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3224:	6f 81       	ldd	r22, Y+7	; 0x07
    3226:	78 85       	ldd	r23, Y+8	; 0x08
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <APP_plzEnterPassword+0x1a2>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <APP_plzEnterPassword+0x220>
	else if (__tmp > 65535)
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	4f e7       	ldi	r20, 0x7F	; 127
    3254:	57 e4       	ldi	r21, 0x47	; 71
    3256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    325a:	18 16       	cp	r1, r24
    325c:	4c f5       	brge	.+82     	; 0x32b0 <APP_plzEnterPassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3260:	7c 85       	ldd	r23, Y+12	; 0x0c
    3262:	8d 85       	ldd	r24, Y+13	; 0x0d
    3264:	9e 85       	ldd	r25, Y+14	; 0x0e
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <APP_plzEnterPassword+0x202>
    3288:	88 ec       	ldi	r24, 0xC8	; 200
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	8b 83       	std	Y+3, r24	; 0x03
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <APP_plzEnterPassword+0x1f0>
    3298:	9c 83       	std	Y+4, r25	; 0x04
    329a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <APP_plzEnterPassword+0x1e4>
    32ae:	14 c0       	rjmp	.+40     	; 0x32d8 <APP_plzEnterPassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <APP_plzEnterPassword+0x22c>
    32d4:	9a 83       	std	Y+2, r25	; 0x02
    32d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	APP_sendPassword(g_enteredPassword);
    32d8:	82 ef       	ldi	r24, 0xF2	; 242
    32da:	91 e0       	ldi	r25, 0x01	; 1
    32dc:	0e 94 05 18 	call	0x300a	; 0x300a <APP_sendPassword>
}
    32e0:	6c 96       	adiw	r28, 0x1c	; 28
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	de bf       	out	0x3e, r29	; 62
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	cd bf       	out	0x3d, r28	; 61
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	08 95       	ret

000032f6 <APP_gateControl>:


void APP_gateControl(void){
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62

	tick++; /* Every tick means 3 seconds has passed */
    32fe:	80 91 f0 01 	lds	r24, 0x01F0
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	80 93 f0 01 	sts	0x01F0, r24

	if(tick == 5) /* 15 seconds passed */
    3308:	80 91 f0 01 	lds	r24, 0x01F0
    330c:	85 30       	cpi	r24, 0x05	; 5
    330e:	49 f4       	brne	.+18     	; 0x3322 <APP_gateControl+0x2c>
	{
		LCD_clearScreen();
    3310:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		LCD_displayStringRowColumn("Door is unlocked",0,0);
    3314:	8f eb       	ldi	r24, 0xBF	; 191
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	40 e0       	ldi	r20, 0x00	; 0
    331c:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
    3320:	18 c0       	rjmp	.+48     	; 0x3352 <APP_gateControl+0x5c>
	}
	else if(tick == 6) /* 18 seconds passed */
    3322:	80 91 f0 01 	lds	r24, 0x01F0
    3326:	86 30       	cpi	r24, 0x06	; 6
    3328:	49 f4       	brne	.+18     	; 0x333c <APP_gateControl+0x46>
	{
		LCD_clearScreen();
    332a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_clearScreen>
		LCD_displayStringRowColumn("Door is locking",0,0);
    332e:	80 ed       	ldi	r24, 0xD0	; 208
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_displayStringRowColumn>
    333a:	0b c0       	rjmp	.+22     	; 0x3352 <APP_gateControl+0x5c>
	}
	else if(tick == 11) /* After another 15 seconds */
    333c:	80 91 f0 01 	lds	r24, 0x01F0
    3340:	8b 30       	cpi	r24, 0x0B	; 11
    3342:	39 f4       	brne	.+14     	; 0x3352 <APP_gateControl+0x5c>
	{
		currentState = MAIN_OPTIONS;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	80 93 f1 01 	sts	0x01F1, r24
		tick = 0;
    334a:	10 92 f0 01 	sts	0x01F0, r1
		TIMER1_deInit();
    334e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <TIMER1_deInit>
	}
}
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <APP_errorControl>:


void APP_errorControl(void){
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62

	tick++; /* Every tick means 6 seconds has passed */
    3360:	80 91 f0 01 	lds	r24, 0x01F0
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	80 93 f0 01 	sts	0x01F0, r24

	if(tick == 10) /* 60 seconds passed */
    336a:	80 91 f0 01 	lds	r24, 0x01F0
    336e:	8a 30       	cpi	r24, 0x0A	; 10
    3370:	69 f4       	brne	.+26     	; 0x338c <APP_errorControl+0x34>
	{
		TIMER1_deInit();
    3372:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <TIMER1_deInit>
		g_TIMER1_configurations.compare_value = 23500;
    3376:	8c ec       	ldi	r24, 0xCC	; 204
    3378:	9b e5       	ldi	r25, 0x5B	; 91
    337a:	90 93 01 02 	sts	0x0201, r25
    337e:	80 93 00 02 	sts	0x0200, r24
		tick = 0;
    3382:	10 92 f0 01 	sts	0x01F0, r1
		currentState = MAIN_OPTIONS;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	80 93 f1 01 	sts	0x01F1, r24
	}
}
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <__mulsi3>:
    3392:	62 9f       	mul	r22, r18
    3394:	d0 01       	movw	r26, r0
    3396:	73 9f       	mul	r23, r19
    3398:	f0 01       	movw	r30, r0
    339a:	82 9f       	mul	r24, r18
    339c:	e0 0d       	add	r30, r0
    339e:	f1 1d       	adc	r31, r1
    33a0:	64 9f       	mul	r22, r20
    33a2:	e0 0d       	add	r30, r0
    33a4:	f1 1d       	adc	r31, r1
    33a6:	92 9f       	mul	r25, r18
    33a8:	f0 0d       	add	r31, r0
    33aa:	83 9f       	mul	r24, r19
    33ac:	f0 0d       	add	r31, r0
    33ae:	74 9f       	mul	r23, r20
    33b0:	f0 0d       	add	r31, r0
    33b2:	65 9f       	mul	r22, r21
    33b4:	f0 0d       	add	r31, r0
    33b6:	99 27       	eor	r25, r25
    33b8:	72 9f       	mul	r23, r18
    33ba:	b0 0d       	add	r27, r0
    33bc:	e1 1d       	adc	r30, r1
    33be:	f9 1f       	adc	r31, r25
    33c0:	63 9f       	mul	r22, r19
    33c2:	b0 0d       	add	r27, r0
    33c4:	e1 1d       	adc	r30, r1
    33c6:	f9 1f       	adc	r31, r25
    33c8:	bd 01       	movw	r22, r26
    33ca:	cf 01       	movw	r24, r30
    33cc:	11 24       	eor	r1, r1
    33ce:	08 95       	ret

000033d0 <__udivmodsi4>:
    33d0:	a1 e2       	ldi	r26, 0x21	; 33
    33d2:	1a 2e       	mov	r1, r26
    33d4:	aa 1b       	sub	r26, r26
    33d6:	bb 1b       	sub	r27, r27
    33d8:	fd 01       	movw	r30, r26
    33da:	0d c0       	rjmp	.+26     	; 0x33f6 <__udivmodsi4_ep>

000033dc <__udivmodsi4_loop>:
    33dc:	aa 1f       	adc	r26, r26
    33de:	bb 1f       	adc	r27, r27
    33e0:	ee 1f       	adc	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	a2 17       	cp	r26, r18
    33e6:	b3 07       	cpc	r27, r19
    33e8:	e4 07       	cpc	r30, r20
    33ea:	f5 07       	cpc	r31, r21
    33ec:	20 f0       	brcs	.+8      	; 0x33f6 <__udivmodsi4_ep>
    33ee:	a2 1b       	sub	r26, r18
    33f0:	b3 0b       	sbc	r27, r19
    33f2:	e4 0b       	sbc	r30, r20
    33f4:	f5 0b       	sbc	r31, r21

000033f6 <__udivmodsi4_ep>:
    33f6:	66 1f       	adc	r22, r22
    33f8:	77 1f       	adc	r23, r23
    33fa:	88 1f       	adc	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	1a 94       	dec	r1
    3400:	69 f7       	brne	.-38     	; 0x33dc <__udivmodsi4_loop>
    3402:	60 95       	com	r22
    3404:	70 95       	com	r23
    3406:	80 95       	com	r24
    3408:	90 95       	com	r25
    340a:	9b 01       	movw	r18, r22
    340c:	ac 01       	movw	r20, r24
    340e:	bd 01       	movw	r22, r26
    3410:	cf 01       	movw	r24, r30
    3412:	08 95       	ret

00003414 <__prologue_saves__>:
    3414:	2f 92       	push	r2
    3416:	3f 92       	push	r3
    3418:	4f 92       	push	r4
    341a:	5f 92       	push	r5
    341c:	6f 92       	push	r6
    341e:	7f 92       	push	r7
    3420:	8f 92       	push	r8
    3422:	9f 92       	push	r9
    3424:	af 92       	push	r10
    3426:	bf 92       	push	r11
    3428:	cf 92       	push	r12
    342a:	df 92       	push	r13
    342c:	ef 92       	push	r14
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	ca 1b       	sub	r28, r26
    343e:	db 0b       	sbc	r29, r27
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	09 94       	ijmp

0000344c <__epilogue_restores__>:
    344c:	2a 88       	ldd	r2, Y+18	; 0x12
    344e:	39 88       	ldd	r3, Y+17	; 0x11
    3450:	48 88       	ldd	r4, Y+16	; 0x10
    3452:	5f 84       	ldd	r5, Y+15	; 0x0f
    3454:	6e 84       	ldd	r6, Y+14	; 0x0e
    3456:	7d 84       	ldd	r7, Y+13	; 0x0d
    3458:	8c 84       	ldd	r8, Y+12	; 0x0c
    345a:	9b 84       	ldd	r9, Y+11	; 0x0b
    345c:	aa 84       	ldd	r10, Y+10	; 0x0a
    345e:	b9 84       	ldd	r11, Y+9	; 0x09
    3460:	c8 84       	ldd	r12, Y+8	; 0x08
    3462:	df 80       	ldd	r13, Y+7	; 0x07
    3464:	ee 80       	ldd	r14, Y+6	; 0x06
    3466:	fd 80       	ldd	r15, Y+5	; 0x05
    3468:	0c 81       	ldd	r16, Y+4	; 0x04
    346a:	1b 81       	ldd	r17, Y+3	; 0x03
    346c:	aa 81       	ldd	r26, Y+2	; 0x02
    346e:	b9 81       	ldd	r27, Y+1	; 0x01
    3470:	ce 0f       	add	r28, r30
    3472:	d1 1d       	adc	r29, r1
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	ed 01       	movw	r28, r26
    3480:	08 95       	ret

00003482 <itoa>:
    3482:	fb 01       	movw	r30, r22
    3484:	9f 01       	movw	r18, r30
    3486:	e8 94       	clt
    3488:	42 30       	cpi	r20, 0x02	; 2
    348a:	c4 f0       	brlt	.+48     	; 0x34bc <itoa+0x3a>
    348c:	45 32       	cpi	r20, 0x25	; 37
    348e:	b4 f4       	brge	.+44     	; 0x34bc <itoa+0x3a>
    3490:	4a 30       	cpi	r20, 0x0A	; 10
    3492:	29 f4       	brne	.+10     	; 0x349e <itoa+0x1c>
    3494:	97 fb       	bst	r25, 7
    3496:	1e f4       	brtc	.+6      	; 0x349e <itoa+0x1c>
    3498:	90 95       	com	r25
    349a:	81 95       	neg	r24
    349c:	9f 4f       	sbci	r25, 0xFF	; 255
    349e:	64 2f       	mov	r22, r20
    34a0:	77 27       	eor	r23, r23
    34a2:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__udivmodhi4>
    34a6:	80 5d       	subi	r24, 0xD0	; 208
    34a8:	8a 33       	cpi	r24, 0x3A	; 58
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <itoa+0x2c>
    34ac:	89 5d       	subi	r24, 0xD9	; 217
    34ae:	81 93       	st	Z+, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	a1 f7       	brne	.-24     	; 0x349e <itoa+0x1c>
    34b6:	16 f4       	brtc	.+4      	; 0x34bc <itoa+0x3a>
    34b8:	5d e2       	ldi	r21, 0x2D	; 45
    34ba:	51 93       	st	Z+, r21
    34bc:	10 82       	st	Z, r1
    34be:	c9 01       	movw	r24, r18
    34c0:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <strrev>

000034c4 <strrev>:
    34c4:	dc 01       	movw	r26, r24
    34c6:	fc 01       	movw	r30, r24
    34c8:	67 2f       	mov	r22, r23
    34ca:	71 91       	ld	r23, Z+
    34cc:	77 23       	and	r23, r23
    34ce:	e1 f7       	brne	.-8      	; 0x34c8 <strrev+0x4>
    34d0:	32 97       	sbiw	r30, 0x02	; 2
    34d2:	04 c0       	rjmp	.+8      	; 0x34dc <strrev+0x18>
    34d4:	7c 91       	ld	r23, X
    34d6:	6d 93       	st	X+, r22
    34d8:	70 83       	st	Z, r23
    34da:	62 91       	ld	r22, -Z
    34dc:	ae 17       	cp	r26, r30
    34de:	bf 07       	cpc	r27, r31
    34e0:	c8 f3       	brcs	.-14     	; 0x34d4 <strrev+0x10>
    34e2:	08 95       	ret

000034e4 <__udivmodhi4>:
    34e4:	aa 1b       	sub	r26, r26
    34e6:	bb 1b       	sub	r27, r27
    34e8:	51 e1       	ldi	r21, 0x11	; 17
    34ea:	07 c0       	rjmp	.+14     	; 0x34fa <__udivmodhi4_ep>

000034ec <__udivmodhi4_loop>:
    34ec:	aa 1f       	adc	r26, r26
    34ee:	bb 1f       	adc	r27, r27
    34f0:	a6 17       	cp	r26, r22
    34f2:	b7 07       	cpc	r27, r23
    34f4:	10 f0       	brcs	.+4      	; 0x34fa <__udivmodhi4_ep>
    34f6:	a6 1b       	sub	r26, r22
    34f8:	b7 0b       	sbc	r27, r23

000034fa <__udivmodhi4_ep>:
    34fa:	88 1f       	adc	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	5a 95       	dec	r21
    3500:	a9 f7       	brne	.-22     	; 0x34ec <__udivmodhi4_loop>
    3502:	80 95       	com	r24
    3504:	90 95       	com	r25
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	08 95       	ret

0000350c <_exit>:
    350c:	f8 94       	cli

0000350e <__stop_program>:
    350e:	ff cf       	rjmp	.-2      	; 0x350e <__stop_program>
