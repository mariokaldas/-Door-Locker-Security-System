
final_project_mcu2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002770  00002804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800174  00800174  00002918  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000360a  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000089f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000aff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c379  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d550  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000da06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_7>
      20:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_8>
      24:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 10 	call	0x205e	; 0x205e <main>
      8a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 13 	jmp	0x270e	; 0x270e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 87 13 	jmp	0x270e	; 0x270e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PWM_timer0_start>:
 */

#include"PWM.h"
#include"AVRIO.h"

void PWM_timer0_start(uint8 duty_cycle){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <PWM_timer0_start+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	8a 83       	std	Y+2, r24	; 0x02

	uint8 dutyCycle_percentege;

TCCR0_R.bit.WGM00_bit = 1; /* NON-PWM */
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	80 83       	st	Z, r24
TCCR0_R.bit.WGM01_bit = 1;
     e44:	e3 e5       	ldi	r30, 0x53	; 83
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 60       	ori	r24, 0x08	; 8
     e4c:	80 83       	st	Z, r24

TCCR0_R.bit.COM01_bit = 1; /* NON-INVERTING MODE */
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 62       	ori	r24, 0x20	; 32
     e56:	80 83       	st	Z, r24

TCCR0_R.bit.CS01_bit = 1; /* Setup pre-scaler Fcpu/8  */
     e58:	e3 e5       	ldi	r30, 0x53	; 83
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	80 83       	st	Z, r24

DDRB_R.bit.DDRB3_bit = 1; /* OC0 pin is output */
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	80 83       	st	Z, r24

/* The generated PWM signal is 500 HZ */

TCNT0_R = 0; /* Initialize counter */
     e6c:	e2 e5       	ldi	r30, 0x52	; 82
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	10 82       	st	Z, r1

dutyCycle_percentege = (uint8)((uint32)(duty_cycle*255)/100);
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	48 2f       	mov	r20, r24
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	ca 01       	movw	r24, r20
     e7a:	9c 01       	movw	r18, r24
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	c9 01       	movw	r24, r18
     e82:	96 95       	lsr	r25
     e84:	98 2f       	mov	r25, r24
     e86:	88 27       	eor	r24, r24
     e88:	97 95       	ror	r25
     e8a:	87 95       	ror	r24
     e8c:	82 1b       	sub	r24, r18
     e8e:	93 0b       	sbc	r25, r19
     e90:	84 0f       	add	r24, r20
     e92:	95 1f       	adc	r25, r21
     e94:	aa 27       	eor	r26, r26
     e96:	97 fd       	sbrc	r25, 7
     e98:	a0 95       	com	r26
     e9a:	ba 2f       	mov	r27, r26
     e9c:	24 e6       	ldi	r18, 0x64	; 100
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
     eac:	da 01       	movw	r26, r20
     eae:	c9 01       	movw	r24, r18
     eb0:	89 83       	std	Y+1, r24	; 0x01

OCR0_R = dutyCycle_percentege;
     eb2:	ec e5       	ldi	r30, 0x5C	; 92
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	80 83       	st	Z, r24
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <TWI_init>:

/**************************************************************************
 *                        Functions definitions
 * ************************************************************************/

void TWI_init(TWI_configType* configurations){
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <TWI_init+0x6>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 TWBR_value;

	TWBR_value = (((F_CPU/configurations->SCL_FREQ)-16)/8);
     ed4:	ea 81       	ldd	r30, Y+2	; 0x02
     ed6:	fb 81       	ldd	r31, Y+3	; 0x03
     ed8:	21 81       	ldd	r18, Z+1	; 0x01
     eda:	32 81       	ldd	r19, Z+2	; 0x02
     edc:	43 81       	ldd	r20, Z+3	; 0x03
     ede:	54 81       	ldd	r21, Z+4	; 0x04
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	92 e1       	ldi	r25, 0x12	; 18
     ee4:	aa e7       	ldi	r26, 0x7A	; 122
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
     ef0:	da 01       	movw	r26, r20
     ef2:	c9 01       	movw	r24, r18
     ef4:	40 97       	sbiw	r24, 0x10	; 16
     ef6:	a1 09       	sbc	r26, r1
     ef8:	b1 09       	sbc	r27, r1
     efa:	68 94       	set
     efc:	12 f8       	bld	r1, 2
     efe:	b6 95       	lsr	r27
     f00:	a7 95       	ror	r26
     f02:	97 95       	ror	r25
     f04:	87 95       	ror	r24
     f06:	16 94       	lsr	r1
     f08:	d1 f7       	brne	.-12     	; 0xefe <TWI_init+0x3a>
     f0a:	89 83       	std	Y+1, r24	; 0x01

	TWBR_R = TWBR_value; /* TWI with 400HZ and TWPS = 00 and FCPU = 8MHZ */
     f0c:	e0 e2       	ldi	r30, 0x20	; 32
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	80 83       	st	Z, r24
	TWSR_R.bit.TWPS_bit = 0; /* For adjusting clock and pre-scaler ( assumed ) */
     f14:	e1 e2       	ldi	r30, 0x21	; 33
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8c 7f       	andi	r24, 0xFC	; 252
     f1c:	80 83       	st	Z, r24
	TWAR_R.bit.TWA_bit = configurations->address;  /* My address */
     f1e:	a2 e2       	ldi	r26, 0x22	; 34
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ea 81       	ldd	r30, Y+2	; 0x02
     f24:	fb 81       	ldd	r31, Y+3	; 0x03
     f26:	80 81       	ld	r24, Z
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	98 2f       	mov	r25, r24
     f2c:	99 0f       	add	r25, r25
     f2e:	8c 91       	ld	r24, X
     f30:	81 70       	andi	r24, 0x01	; 1
     f32:	89 2b       	or	r24, r25
     f34:	8c 93       	st	X, r24
	TWCR_R.bit.TWEN_bit = 1; /* TWI enable module */
     f36:	e6 e5       	ldi	r30, 0x56	; 86
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	80 83       	st	Z, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <TWI_start>:

void TWI_start(void){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
     f54:	e6 e5       	ldi	r30, 0x56	; 86
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	80 83       	st	Z, r24
	TWCR_R.bit.TWSTA_bit = 1; /* Enable start bit */
     f5c:	e6 e5       	ldi	r30, 0x56	; 86
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
     f66:	e6 e5       	ldi	r30, 0x56	; 86
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 68       	ori	r24, 0x80	; 128
     f6e:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Start bit is sent */
     f70:	e6 e5       	ldi	r30, 0x56	; 86
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 78       	andi	r24, 0x80	; 128
     f78:	88 23       	and	r24, r24
     f7a:	d1 f3       	breq	.-12     	; 0xf70 <TWI_start+0x24>
}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <TWI_stop>:

void TWI_stop(void){
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
     f8a:	e6 e5       	ldi	r30, 0x56	; 86
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	80 83       	st	Z, r24
	TWCR_R.bit.TWSTO_bit = 1; /* Enable start bit */
     f92:	e6 e5       	ldi	r30, 0x56	; 86
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 61       	ori	r24, 0x10	; 16
     f9a:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
     f9c:	e6 e5       	ldi	r30, 0x56	; 86
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 68       	ori	r24, 0x80	; 128
     fa4:	80 83       	st	Z, r24

}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TWI_writeByte>:

void TWI_writeByte(uint8 data){
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01

	TWDR_R = data;
     fb8:	e3 e2       	ldi	r30, 0x23	; 35
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	80 83       	st	Z, r24

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
     fc0:	e6 e5       	ldi	r30, 0x56	; 86
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Data is sent */
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 78       	andi	r24, 0x80	; 128
     fda:	88 23       	and	r24, r24
     fdc:	d1 f3       	breq	.-12     	; 0xfd2 <TWI_writeByte+0x26>
}
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void){
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	80 83       	st	Z, r24
	TWCR_R.bit.TWEA_bit = 1; /* Enable ACK bit */
     ff6:	e6 e5       	ldi	r30, 0x56	; 86
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Data is received */
    100a:	e6 e5       	ldi	r30, 0x56	; 86
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 78       	andi	r24, 0x80	; 128
    1012:	88 23       	and	r24, r24
    1014:	d1 f3       	breq	.-12     	; 0x100a <TWI_readByteWithACK+0x24>

	return TWDR_R;
    1016:	e3 e2       	ldi	r30, 0x23	; 35
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void){
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
    102a:	e6 e5       	ldi	r30, 0x56	; 86
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    1032:	e6 e5       	ldi	r30, 0x56	; 86
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Data is received */
    103c:	e6 e5       	ldi	r30, 0x56	; 86
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 78       	andi	r24, 0x80	; 128
    1044:	88 23       	and	r24, r24
    1046:	d1 f3       	breq	.-12     	; 0x103c <TWI_readByteWithNACK+0x1a>

	return TWDR_R;
    1048:	e3 e2       	ldi	r30, 0x23	; 35
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <TWI_getStatus>:

uint8 TWI_getStatus(void){
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62

	return TWSR_R.bit.TWS_bit <<3 ;/* because of standard statues values */
    105c:	e1 e2       	ldi	r30, 0x21	; 33
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	86 95       	lsr	r24
    1068:	88 0f       	add	r24, r24
    106a:	88 0f       	add	r24, r24
    106c:	88 0f       	add	r24, r24
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <UART_init>:
#endif
/**************************************************************************
 *                       Functions definition
 * ***********************************************************************/

void UART_init(UART_configType* configurations){
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <UART_init+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <UART_init+0x8>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	8b 83       	std	Y+3, r24	; 0x03

	/* DO NOT ACCESS (URSEL) BIT UNDER ANY CONDITION */

	uint16 ubrr_value;

	UCSRA_R.bit.U2X_bit = 1; /* Double speed */
    1084:	eb e2       	ldi	r30, 0x2B	; 43
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	80 83       	st	Z, r24
#ifdef INTERRUPT
	UCSRB_R.bit.RXCIE_bit = 1; /* Receive Complete interrupt enable */
#endif
	UCSRB_R.bit.RXEN_bit = 1; /* Receiver enable */
    108e:	ea e2       	ldi	r30, 0x2A	; 42
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	80 83       	st	Z, r24

	UCSRB_R.bit.TXEN_bit = 1; /* Transmitter enable */
    1098:	ea e2       	ldi	r30, 0x2A	; 42
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 60       	ori	r24, 0x08	; 8
    10a0:	80 83       	st	Z, r24

	UCSRC_R.bit.UMSEL_bit = 0; /* Asynchronous */
    10a2:	e0 e4       	ldi	r30, 0x40	; 64
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7b       	andi	r24, 0xBF	; 191
    10aa:	80 83       	st	Z, r24

	UCSRC_R.bit.UPM_bit = configurations->parity; /* Select parity-bit mode */
    10ac:	a0 e4       	ldi	r26, 0x40	; 64
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb 81       	ldd	r30, Y+3	; 0x03
    10b2:	fc 81       	ldd	r31, Y+4	; 0x04
    10b4:	81 81       	ldd	r24, Z+1	; 0x01
    10b6:	83 70       	andi	r24, 0x03	; 3
    10b8:	83 70       	andi	r24, 0x03	; 3
    10ba:	98 2f       	mov	r25, r24
    10bc:	92 95       	swap	r25
    10be:	90 7f       	andi	r25, 0xF0	; 240
    10c0:	8c 91       	ld	r24, X
    10c2:	8f 7c       	andi	r24, 0xCF	; 207
    10c4:	89 2b       	or	r24, r25
    10c6:	8c 93       	st	X, r24

	UCSRC_R.bit.USBS_bit = configurations->stop; /* Select stop_bit mode */
    10c8:	a0 e4       	ldi	r26, 0x40	; 64
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	eb 81       	ldd	r30, Y+3	; 0x03
    10ce:	fc 81       	ldd	r31, Y+4	; 0x04
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	81 70       	andi	r24, 0x01	; 1
    10d4:	81 70       	andi	r24, 0x01	; 1
    10d6:	98 2f       	mov	r25, r24
    10d8:	99 0f       	add	r25, r25
    10da:	99 0f       	add	r25, r25
    10dc:	99 0f       	add	r25, r25
    10de:	8c 91       	ld	r24, X
    10e0:	87 7f       	andi	r24, 0xF7	; 247
    10e2:	89 2b       	or	r24, r25
    10e4:	8c 93       	st	X, r24

	UCSRC_R.bit.UCSZ_bit = configurations->bit_data; /* select number of data bits */
    10e6:	a0 e4       	ldi	r26, 0x40	; 64
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb 81       	ldd	r30, Y+3	; 0x03
    10ec:	fc 81       	ldd	r31, Y+4	; 0x04
    10ee:	80 81       	ld	r24, Z
    10f0:	83 70       	andi	r24, 0x03	; 3
    10f2:	83 70       	andi	r24, 0x03	; 3
    10f4:	98 2f       	mov	r25, r24
    10f6:	99 0f       	add	r25, r25
    10f8:	8c 91       	ld	r24, X
    10fa:	89 7f       	andi	r24, 0xF9	; 249
    10fc:	89 2b       	or	r24, r25
    10fe:	8c 93       	st	X, r24

	ubrr_value =  (uint16)(((float) F_CPU/((uint32)8 * (configurations->baudRate)))-1);
    1100:	eb 81       	ldd	r30, Y+3	; 0x03
    1102:	fc 81       	ldd	r31, Y+4	; 0x04
    1104:	83 81       	ldd	r24, Z+3	; 0x03
    1106:	94 81       	ldd	r25, Z+4	; 0x04
    1108:	cc 01       	movw	r24, r24
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	aa 1f       	adc	r26, r26
    1114:	bb 1f       	adc	r27, r27
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	aa 1f       	adc	r26, r26
    111c:	bb 1f       	adc	r27, r27
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	aa 1f       	adc	r26, r26
    1124:	bb 1f       	adc	r27, r27
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	74 e2       	ldi	r23, 0x24	; 36
    1136:	84 ef       	ldi	r24, 0xF4	; 244
    1138:	9a e4       	ldi	r25, 0x4A	; 74
    113a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01

	UBRRH_R.bit.UBRR_bit = ubrr_value>>8;
    1166:	e0 e4       	ldi	r30, 0x40	; 64
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	89 2f       	mov	r24, r25
    1170:	99 27       	eor	r25, r25
    1172:	8f 70       	andi	r24, 0x0F	; 15
    1174:	98 2f       	mov	r25, r24
    1176:	9f 70       	andi	r25, 0x0F	; 15
    1178:	80 81       	ld	r24, Z
    117a:	80 7f       	andi	r24, 0xF0	; 240
    117c:	89 2b       	or	r24, r25
    117e:	80 83       	st	Z, r24

	UBRRL_R = ubrr_value;
    1180:	e9 e2       	ldi	r30, 0x29	; 41
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	80 83       	st	Z, r24
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <UART_sendByte>:


void UART_sendByte(const uint8 data){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01

	/* Stuck in loop till the data register is empty */
	while(UCSRA_R.bit.UDRE_bit == 0);
    11a2:	eb e2       	ldi	r30, 0x2B	; 43
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 72       	andi	r24, 0x20	; 32
    11aa:	88 23       	and	r24, r24
    11ac:	d1 f3       	breq	.-12     	; 0x11a2 <UART_sendByte+0xc>

	/* As data register is empty i can send a byte */
	UDR_R = data;
    11ae:	ec e2       	ldi	r30, 0x2C	; 44
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	80 83       	st	Z, r24
}
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <UART_receiveByte>:

uint8 UART_receiveByte(void){
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62

#ifdef POLLING
	while(UCSRA_R.bit.RXC_bit == 0);
    11c6:	eb e2       	ldi	r30, 0x2B	; 43
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 78       	andi	r24, 0x80	; 128
    11ce:	88 23       	and	r24, r24
    11d0:	d1 f3       	breq	.-12     	; 0x11c6 <UART_receiveByte+0x8>

	return UDR_R;
    11d2:	ec e2       	ldi	r30, 0x2C	; 44
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
#endif

#ifdef INTERRUPT
	return g_receivedByte;
#endif
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <UART_sendString>:

void UART_sendString(const uint8 *str){
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <UART_sendString+0x6>
    11e4:	0f 92       	push	r0
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9b 83       	std	Y+3, r25	; 0x03
    11ec:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i;

	for(i=0; str[i] != '\0';i++){
    11ee:	19 82       	std	Y+1, r1	; 0x01
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <UART_sendString+0x30>
		UART_sendByte(str[i]);
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	80 81       	ld	r24, Z
    1204:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>

void UART_sendString(const uint8 *str){

	uint8 i;

	for(i=0; str[i] != '\0';i++){
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	80 81       	ld	r24, Z
    1220:	88 23       	and	r24, r24
    1222:	39 f7       	brne	.-50     	; 0x11f2 <UART_sendString+0x14>
		UART_sendByte(str[i]);
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <UART_receiveString>:

void UART_receiveString(uint8 *str){
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <UART_receiveString+0xa>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	9b 83       	std	Y+3, r25	; 0x03
    1242:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    1244:	19 82       	std	Y+1, r1	; 0x01

	str[i] = UART_receiveByte();
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	8c 01       	movw	r16, r24
    1252:	02 0f       	add	r16, r18
    1254:	13 1f       	adc	r17, r19
    1256:	0e 94 df 08 	call	0x11be	; 0x11be <UART_receiveByte>
    125a:	f8 01       	movw	r30, r16
    125c:	80 83       	st	Z, r24
    125e:	0f c0       	rjmp	.+30     	; 0x127e <UART_receiveString+0x4e>

	while(str[i] != '#'){

		i++;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	8c 01       	movw	r16, r24
    1272:	02 0f       	add	r16, r18
    1274:	13 1f       	adc	r17, r19
    1276:	0e 94 df 08 	call	0x11be	; 0x11be <UART_receiveByte>
    127a:	f8 01       	movw	r30, r16
    127c:	80 83       	st	Z, r24

	uint8 i=0;

	str[i] = UART_receiveByte();

	while(str[i] != '#'){
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	fc 01       	movw	r30, r24
    128a:	e2 0f       	add	r30, r18
    128c:	f3 1f       	adc	r31, r19
    128e:	80 81       	ld	r24, Z
    1290:	83 32       	cpi	r24, 0x23	; 35
    1292:	31 f7       	brne	.-52     	; 0x1260 <UART_receiveString+0x30>

		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0';
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	fc 01       	movw	r30, r24
    12a0:	e2 0f       	add	r30, r18
    12a2:	f3 1f       	adc	r31, r19
    12a4:	10 82       	st	Z, r1
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <GPIO_setupPinDirection+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <GPIO_setupPinDirection+0x8>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
    12c8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	88 30       	cpi	r24, 0x08	; 8
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <GPIO_setupPinDirection+0x1c>
    12d0:	d5 c0       	rjmp	.+426    	; 0x147c <GPIO_setupPinDirection+0x1c6>
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	08 f0       	brcs	.+2      	; 0x12da <GPIO_setupPinDirection+0x24>
    12d8:	d1 c0       	rjmp	.+418    	; 0x147c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3d 83       	std	Y+5, r19	; 0x05
    12e2:	2c 83       	std	Y+4, r18	; 0x04
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <GPIO_setupPinDirection+0x3a>
    12ee:	43 c0       	rjmp	.+134    	; 0x1376 <GPIO_setupPinDirection+0xc0>
    12f0:	2c 81       	ldd	r18, Y+4	; 0x04
    12f2:	3d 81       	ldd	r19, Y+5	; 0x05
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <GPIO_setupPinDirection+0x4e>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	71 f0       	breq	.+28     	; 0x131e <GPIO_setupPinDirection+0x68>
    1302:	bc c0       	rjmp	.+376    	; 0x147c <GPIO_setupPinDirection+0x1c6>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <GPIO_setupPinDirection+0x5a>
    130e:	5f c0       	rjmp	.+190    	; 0x13ce <GPIO_setupPinDirection+0x118>
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <GPIO_setupPinDirection+0x66>
    131a:	85 c0       	rjmp	.+266    	; 0x1426 <GPIO_setupPinDirection+0x170>
    131c:	af c0       	rjmp	.+350    	; 0x147c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	a1 f4       	brne	.+40     	; 0x134c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1324:	aa e3       	ldi	r26, 0x3A	; 58
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ea e3       	ldi	r30, 0x3A	; 58
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_setupPinDirection+0x8c>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_setupPinDirection+0x88>
    1346:	84 2b       	or	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	98 c0       	rjmp	.+304    	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    134c:	aa e3       	ldi	r26, 0x3A	; 58
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ea e3       	ldi	r30, 0x3A	; 58
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_setupPinDirection+0xb4>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_setupPinDirection+0xb0>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	83 c0       	rjmp	.+262    	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	a1 f4       	brne	.+40     	; 0x13a4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    137c:	a7 e3       	ldi	r26, 0x37	; 55
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e7 e3       	ldi	r30, 0x37	; 55
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_setupPinDirection+0xe4>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_setupPinDirection+0xe0>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	6c c0       	rjmp	.+216    	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13a4:	a7 e3       	ldi	r26, 0x37	; 55
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_setupPinDirection+0x10c>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <GPIO_setupPinDirection+0x108>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	57 c0       	rjmp	.+174    	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	a1 f4       	brne	.+40     	; 0x13fc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13d4:	a4 e3       	ldi	r26, 0x34	; 52
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e4 e3       	ldi	r30, 0x34	; 52
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_setupPinDirection+0x13c>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_setupPinDirection+0x138>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	40 c0       	rjmp	.+128    	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13fc:	a4 e3       	ldi	r26, 0x34	; 52
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_setupPinDirection+0x164>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_setupPinDirection+0x160>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	2b c0       	rjmp	.+86     	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	a1 f4       	brne	.+40     	; 0x1454 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    142c:	a1 e3       	ldi	r26, 0x31	; 49
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <GPIO_setupPinDirection+0x194>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <GPIO_setupPinDirection+0x190>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	14 c0       	rjmp	.+40     	; 0x147c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1454:	a1 e3       	ldi	r26, 0x31	; 49
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e1 e3       	ldi	r30, 0x31	; 49
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0x1bc>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0x1b8>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <GPIO_writePin+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_writePin+0x8>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
    149e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	88 30       	cpi	r24, 0x08	; 8
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <GPIO_writePin+0x1c>
    14a6:	d5 c0       	rjmp	.+426    	; 0x1652 <GPIO_writePin+0x1c6>
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <GPIO_writePin+0x24>
    14ae:	d1 c0       	rjmp	.+418    	; 0x1652 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else{
		switch(port_num){
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3d 83       	std	Y+5, r19	; 0x05
    14b8:	2c 83       	std	Y+4, r18	; 0x04
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <GPIO_writePin+0x3a>
    14c4:	43 c0       	rjmp	.+134    	; 0x154c <GPIO_writePin+0xc0>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <GPIO_writePin+0x4e>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <GPIO_writePin+0x68>
    14d8:	bc c0       	rjmp	.+376    	; 0x1652 <GPIO_writePin+0x1c6>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <GPIO_writePin+0x5a>
    14e4:	5f c0       	rjmp	.+190    	; 0x15a4 <GPIO_writePin+0x118>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <GPIO_writePin+0x66>
    14f0:	85 c0       	rjmp	.+266    	; 0x15fc <GPIO_writePin+0x170>
    14f2:	af c0       	rjmp	.+350    	; 0x1652 <GPIO_writePin+0x1c6>

		case PORTA_ID:
			if(value == HIGH){
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	a1 f4       	brne	.+40     	; 0x1522 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    14fa:	ab e3       	ldi	r26, 0x3B	; 59
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e3       	ldi	r30, 0x3B	; 59
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <GPIO_writePin+0x8c>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <GPIO_writePin+0x88>
    151c:	84 2b       	or	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	98 c0       	rjmp	.+304    	; 0x1652 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    1522:	ab e3       	ldi	r26, 0x3B	; 59
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	eb e3       	ldi	r30, 0x3B	; 59
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <GPIO_writePin+0xb4>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <GPIO_writePin+0xb0>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	83 c0       	rjmp	.+262    	; 0x1652 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == HIGH)
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	a1 f4       	brne	.+40     	; 0x157a <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_writePin+0xe4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_writePin+0xe0>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	6c c0       	rjmp	.+216    	; 0x1652 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_writePin+0x10c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_writePin+0x108>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	57 c0       	rjmp	.+174    	; 0x1652 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == HIGH)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    15aa:	a5 e3       	ldi	r26, 0x35	; 53
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <GPIO_writePin+0x13c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <GPIO_writePin+0x138>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	40 c0       	rjmp	.+128    	; 0x1652 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    15d2:	a5 e3       	ldi	r26, 0x35	; 53
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_writePin+0x164>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_writePin+0x160>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	2b c0       	rjmp	.+86     	; 0x1652 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == HIGH)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	a1 f4       	brne	.+40     	; 0x162a <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1602:	a2 e3       	ldi	r26, 0x32	; 50
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e2 e3       	ldi	r30, 0x32	; 50
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_writePin+0x194>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_writePin+0x190>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    162a:	a2 e3       	ldi	r26, 0x32	; 50
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e2 e3       	ldi	r30, 0x32	; 50
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0x1bc>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0x1b8>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
			break;
		}
	}
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <GPIO_readPin+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_readPin+0x8>
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	88 30       	cpi	r24, 0x08	; 8
    1678:	18 f4       	brcc	.+6      	; 0x1680 <GPIO_readPin+0x1e>
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	10 f0       	brcs	.+4      	; 0x1684 <GPIO_readPin+0x22>
	{
		return 0;
    1680:	1d 82       	std	Y+5, r1	; 0x05
    1682:	af c0       	rjmp	.+350    	; 0x17e2 <GPIO_readPin+0x180>
	}

	switch(port_num){
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3c 83       	std	Y+4, r19	; 0x04
    168c:	2b 83       	std	Y+3, r18	; 0x03
    168e:	4b 81       	ldd	r20, Y+3	; 0x03
    1690:	5c 81       	ldd	r21, Y+4	; 0x04
    1692:	41 30       	cpi	r20, 0x01	; 1
    1694:	51 05       	cpc	r21, r1
    1696:	d9 f1       	breq	.+118    	; 0x170e <GPIO_readPin+0xac>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	91 05       	cpc	r25, r1
    16a0:	34 f4       	brge	.+12     	; 0x16ae <GPIO_readPin+0x4c>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	21 15       	cp	r18, r1
    16a8:	31 05       	cpc	r19, r1
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <GPIO_readPin+0x66>
    16ac:	99 c0       	rjmp	.+306    	; 0x17e0 <GPIO_readPin+0x17e>
    16ae:	4b 81       	ldd	r20, Y+3	; 0x03
    16b0:	5c 81       	ldd	r21, Y+4	; 0x04
    16b2:	42 30       	cpi	r20, 0x02	; 2
    16b4:	51 05       	cpc	r21, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <GPIO_readPin+0x58>
    16b8:	4d c0       	rjmp	.+154    	; 0x1754 <GPIO_readPin+0xf2>
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <GPIO_readPin+0x64>
    16c4:	6a c0       	rjmp	.+212    	; 0x179a <GPIO_readPin+0x138>
    16c6:	8c c0       	rjmp	.+280    	; 0x17e0 <GPIO_readPin+0x17e>

	case PORTA_ID:
		if(GET_BIT(PINA,pin_num))
    16c8:	e9 e3       	ldi	r30, 0x39	; 57
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_readPin+0x80>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	2a 95       	dec	r18
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_readPin+0x7c>
    16e6:	9a 01       	movw	r18, r20
    16e8:	28 23       	and	r18, r24
    16ea:	39 23       	and	r19, r25
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_readPin+0x98>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_readPin+0x94>
    16fe:	ca 01       	movw	r24, r20
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	19 f0       	breq	.+6      	; 0x170a <GPIO_readPin+0xa8>
			return 1;
    1704:	51 e0       	ldi	r21, 0x01	; 1
    1706:	5d 83       	std	Y+5, r21	; 0x05
    1708:	6c c0       	rjmp	.+216    	; 0x17e2 <GPIO_readPin+0x180>
		else
			return 0;
    170a:	1d 82       	std	Y+5, r1	; 0x05
    170c:	6a c0       	rjmp	.+212    	; 0x17e2 <GPIO_readPin+0x180>
		break;

	case PORTB_ID:
		if(GET_BIT(PINB,pin_num))
    170e:	e6 e3       	ldi	r30, 0x36	; 54
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <GPIO_readPin+0xc6>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	2a 95       	dec	r18
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <GPIO_readPin+0xc2>
    172c:	9a 01       	movw	r18, r20
    172e:	28 23       	and	r18, r24
    1730:	39 23       	and	r19, r25
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_readPin+0xde>
    173c:	55 95       	asr	r21
    173e:	47 95       	ror	r20
    1740:	8a 95       	dec	r24
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_readPin+0xda>
    1744:	ca 01       	movw	r24, r20
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	19 f0       	breq	.+6      	; 0x1750 <GPIO_readPin+0xee>
			return 1;
    174a:	51 e0       	ldi	r21, 0x01	; 1
    174c:	5d 83       	std	Y+5, r21	; 0x05
    174e:	49 c0       	rjmp	.+146    	; 0x17e2 <GPIO_readPin+0x180>
		else
			return 0;
    1750:	1d 82       	std	Y+5, r1	; 0x05
    1752:	47 c0       	rjmp	.+142    	; 0x17e2 <GPIO_readPin+0x180>
		break;

	case PORTC_ID:
		if(GET_BIT(PINC,pin_num))
    1754:	e3 e3       	ldi	r30, 0x33	; 51
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_readPin+0x10c>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	2a 95       	dec	r18
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_readPin+0x108>
    1772:	9a 01       	movw	r18, r20
    1774:	28 23       	and	r18, r24
    1776:	39 23       	and	r19, r25
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_readPin+0x124>
    1782:	55 95       	asr	r21
    1784:	47 95       	ror	r20
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_readPin+0x120>
    178a:	ca 01       	movw	r24, r20
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	19 f0       	breq	.+6      	; 0x1796 <GPIO_readPin+0x134>
			return 1;
    1790:	51 e0       	ldi	r21, 0x01	; 1
    1792:	5d 83       	std	Y+5, r21	; 0x05
    1794:	26 c0       	rjmp	.+76     	; 0x17e2 <GPIO_readPin+0x180>
		else
			return 0;
    1796:	1d 82       	std	Y+5, r1	; 0x05
    1798:	24 c0       	rjmp	.+72     	; 0x17e2 <GPIO_readPin+0x180>
		break;

	case PORTD_ID:
		if(GET_BIT(PIND,pin_num))
    179a:	e0 e3       	ldi	r30, 0x30	; 48
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <GPIO_readPin+0x152>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	2a 95       	dec	r18
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <GPIO_readPin+0x14e>
    17b8:	9a 01       	movw	r18, r20
    17ba:	28 23       	and	r18, r24
    17bc:	39 23       	and	r19, r25
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a9 01       	movw	r20, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_readPin+0x16a>
    17c8:	55 95       	asr	r21
    17ca:	47 95       	ror	r20
    17cc:	8a 95       	dec	r24
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_readPin+0x166>
    17d0:	ca 01       	movw	r24, r20
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	19 f0       	breq	.+6      	; 0x17dc <GPIO_readPin+0x17a>
			return 1;
    17d6:	51 e0       	ldi	r21, 0x01	; 1
    17d8:	5d 83       	std	Y+5, r21	; 0x05
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <GPIO_readPin+0x180>
		else
			return 0;
    17dc:	1d 82       	std	Y+5, r1	; 0x05
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <GPIO_readPin+0x180>
		break;
	}
	return 0;
    17e0:	1d 82       	std	Y+5, r1	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <GPIO_setupPortDirection+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <GPIO_setupPortDirection+0x8>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	90 f5       	brcc	.+100    	; 0x186e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3c 83       	std	Y+4, r19	; 0x04
    1812:	2b 83       	std	Y+3, r18	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	d1 f0       	breq	.+52     	; 0x1852 <GPIO_setupPortDirection+0x5e>
    181e:	2b 81       	ldd	r18, Y+3	; 0x03
    1820:	3c 81       	ldd	r19, Y+4	; 0x04
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	2c f4       	brge	.+10     	; 0x1832 <GPIO_setupPortDirection+0x3e>
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	61 f0       	breq	.+24     	; 0x1848 <GPIO_setupPortDirection+0x54>
    1830:	1e c0       	rjmp	.+60     	; 0x186e <GPIO_setupPortDirection+0x7a>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	81 f0       	breq	.+32     	; 0x185c <GPIO_setupPortDirection+0x68>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	83 30       	cpi	r24, 0x03	; 3
    1842:	91 05       	cpc	r25, r1
    1844:	81 f0       	breq	.+32     	; 0x1866 <GPIO_setupPortDirection+0x72>
    1846:	13 c0       	rjmp	.+38     	; 0x186e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1848:	ea e3       	ldi	r30, 0x3A	; 58
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	80 83       	st	Z, r24
    1850:	0e c0       	rjmp	.+28     	; 0x186e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1852:	e7 e3       	ldi	r30, 0x37	; 55
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	80 83       	st	Z, r24
    185a:	09 c0       	rjmp	.+18     	; 0x186e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    185c:	e4 e3       	ldi	r30, 0x34	; 52
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	80 83       	st	Z, r24
    1864:	04 c0       	rjmp	.+8      	; 0x186e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1866:	e1 e3       	ldi	r30, 0x31	; 49
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	80 83       	st	Z, r24
			break;
		}
	}
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <GPIO_writePort+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPIO_writePort+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
	{
		/* Do Nothing */
	}

	switch(port_num){
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	3c 83       	std	Y+4, r19	; 0x04
    1894:	2b 83       	std	Y+3, r18	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	d1 f0       	breq	.+52     	; 0x18d4 <GPIO_writePort+0x58>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <GPIO_writePort+0x38>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	61 f0       	breq	.+24     	; 0x18ca <GPIO_writePort+0x4e>
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <GPIO_writePort+0x74>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <GPIO_writePort+0x62>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	91 05       	cpc	r25, r1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <GPIO_writePort+0x6c>
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <GPIO_writePort+0x74>

	case PORTA_ID:
		PORTA = value;
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	80 83       	st	Z, r24
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	80 83       	st	Z, r24
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    18de:	e5 e3       	ldi	r30, 0x35	; 53
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	80 83       	st	Z, r24
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	80 83       	st	Z, r24
		break;
	}
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <GPIO_readPort+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <GPIO_readPort+0x8>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	10 f0       	brcs	.+4      	; 0x1916 <GPIO_readPort+0x18>
	{
		return 0;
    1912:	1c 82       	std	Y+4, r1	; 0x04
    1914:	34 c0       	rjmp	.+104    	; 0x197e <GPIO_readPort+0x80>
	}

	switch(port_num){
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	3b 83       	std	Y+3, r19	; 0x03
    191e:	2a 83       	std	Y+2, r18	; 0x02
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	9b 81       	ldd	r25, Y+3	; 0x03
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	91 05       	cpc	r25, r1
    1928:	d1 f0       	breq	.+52     	; 0x195e <GPIO_readPort+0x60>
    192a:	2a 81       	ldd	r18, Y+2	; 0x02
    192c:	3b 81       	ldd	r19, Y+3	; 0x03
    192e:	22 30       	cpi	r18, 0x02	; 2
    1930:	31 05       	cpc	r19, r1
    1932:	2c f4       	brge	.+10     	; 0x193e <GPIO_readPort+0x40>
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	61 f0       	breq	.+24     	; 0x1954 <GPIO_readPort+0x56>
    193c:	1f c0       	rjmp	.+62     	; 0x197c <GPIO_readPort+0x7e>
    193e:	2a 81       	ldd	r18, Y+2	; 0x02
    1940:	3b 81       	ldd	r19, Y+3	; 0x03
    1942:	22 30       	cpi	r18, 0x02	; 2
    1944:	31 05       	cpc	r19, r1
    1946:	81 f0       	breq	.+32     	; 0x1968 <GPIO_readPort+0x6a>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	81 f0       	breq	.+32     	; 0x1972 <GPIO_readPort+0x74>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <GPIO_readPort+0x7e>

	case PORTA_ID:
		return PINA;
    1954:	e9 e3       	ldi	r30, 0x39	; 57
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	90 81       	ld	r25, Z
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	10 c0       	rjmp	.+32     	; 0x197e <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    195e:	e6 e3       	ldi	r30, 0x36	; 54
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	20 81       	ld	r18, Z
    1964:	2c 83       	std	Y+4, r18	; 0x04
    1966:	0b c0       	rjmp	.+22     	; 0x197e <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    1968:	e3 e3       	ldi	r30, 0x33	; 51
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	30 81       	ld	r19, Z
    196e:	3c 83       	std	Y+4, r19	; 0x04
    1970:	06 c0       	rjmp	.+12     	; 0x197e <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    1972:	e0 e3       	ldi	r30, 0x30	; 48
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8c 83       	std	Y+4, r24	; 0x04
    197a:	01 c0       	rjmp	.+2      	; 0x197e <GPIO_readPort+0x80>
		break;
	}
	return 0;
    197c:	1c 82       	std	Y+4, r1	; 0x04
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <__vector_9>:

/****************************************************************************
 *                        INTERRUPT SERVICE ROUTINE
 ****************************************************************************/

ISR(TIMER1_OVF_vect){
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    19b8:	e0 91 74 01 	lds	r30, 0x0174
    19bc:	f0 91 75 01 	lds	r31, 0x0175
    19c0:	09 95       	icall
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	ff 91       	pop	r31
    19c8:	ef 91       	pop	r30
    19ca:	bf 91       	pop	r27
    19cc:	af 91       	pop	r26
    19ce:	9f 91       	pop	r25
    19d0:	8f 91       	pop	r24
    19d2:	7f 91       	pop	r23
    19d4:	6f 91       	pop	r22
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	2f 93       	push	r18
    19f4:	3f 93       	push	r19
    19f6:	4f 93       	push	r20
    19f8:	5f 93       	push	r21
    19fa:	6f 93       	push	r22
    19fc:	7f 93       	push	r23
    19fe:	8f 93       	push	r24
    1a00:	9f 93       	push	r25
    1a02:	af 93       	push	r26
    1a04:	bf 93       	push	r27
    1a06:	ef 93       	push	r30
    1a08:	ff 93       	push	r31
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    1a12:	e0 91 74 01 	lds	r30, 0x0174
    1a16:	f0 91 75 01 	lds	r31, 0x0175
    1a1a:	09 95       	icall
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__vector_8>:

ISR(TIMER1_COMPB_vect){}
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <TIMER1_init>:

/****************************************************************************
 *                         Functions definition
 ****************************************************************************/

void TIMER1_init(TIMER1_configType* configurations){
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	28 97       	sbiw	r28, 0x08	; 8
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05

	uint16 dutyCycle_A,dutyCycle_B;

	switch(configurations->mode){
    1a82:	ed 81       	ldd	r30, Y+5	; 0x05
    1a84:	fe 81       	ldd	r31, Y+6	; 0x06
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	38 87       	std	Y+8, r19	; 0x08
    1a8e:	2f 83       	std	Y+7, r18	; 0x07
    1a90:	8f 81       	ldd	r24, Y+7	; 0x07
    1a92:	98 85       	ldd	r25, Y+8	; 0x08
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <TIMER1_init+0x3a>
    1a9a:	45 c0       	rjmp	.+138    	; 0x1b26 <TIMER1_init+0xc4>
    1a9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a9e:	38 85       	ldd	r19, Y+8	; 0x08
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <TIMER1_init+0x4e>
    1aa6:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa8:	98 85       	ldd	r25, Y+8	; 0x08
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	71 f0       	breq	.+28     	; 0x1aca <TIMER1_init+0x68>
    1aae:	5f c1       	rjmp	.+702    	; 0x1d6e <TIMER1_init+0x30c>
    1ab0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ab2:	38 85       	ldd	r19, Y+8	; 0x08
    1ab4:	22 30       	cpi	r18, 0x02	; 2
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <TIMER1_init+0x5a>
    1aba:	71 c0       	rjmp	.+226    	; 0x1b9e <TIMER1_init+0x13c>
    1abc:	8f 81       	ldd	r24, Y+7	; 0x07
    1abe:	98 85       	ldd	r25, Y+8	; 0x08
    1ac0:	83 30       	cpi	r24, 0x03	; 3
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <TIMER1_init+0x66>
    1ac6:	ca c0       	rjmp	.+404    	; 0x1c5c <TIMER1_init+0x1fa>
    1ac8:	52 c1       	rjmp	.+676    	; 0x1d6e <TIMER1_init+0x30c>

	case NORMAL:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    1aca:	ef e4       	ldi	r30, 0x4F	; 79
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 73       	andi	r24, 0x3F	; 63
    1ad2:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    1ad4:	ef e4       	ldi	r30, 0x4F	; 79
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8f 7c       	andi	r24, 0xCF	; 207
    1adc:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    1ade:	ef e4       	ldi	r30, 0x4F	; 79
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 60       	ori	r24, 0x08	; 8
    1ae6:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    1ae8:	ef e4       	ldi	r30, 0x4F	; 79
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	84 60       	ori	r24, 0x04	; 4
    1af0:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Overflow mode */
    1af2:	ef e4       	ldi	r30, 0x4F	; 79
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8e 7f       	andi	r24, 0xFE	; 254
    1afa:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Overflow mode */
    1afc:	ef e4       	ldi	r30, 0x4F	; 79
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8d 7f       	andi	r24, 0xFD	; 253
    1b04:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 0; /* Overflow mode */
    1b06:	ee e4       	ldi	r30, 0x4E	; 78
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	87 7f       	andi	r24, 0xF7	; 247
    1b0e:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Overflow mode */
    1b10:	ee e4       	ldi	r30, 0x4E	; 78
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8f 7e       	andi	r24, 0xEF	; 239
    1b18:	80 83       	st	Z, r24
		TIMSK_R.bit.TOIE1_bit = 1;  /* Enable interrupt for overflow mode */
    1b1a:	e9 e5       	ldi	r30, 0x59	; 89
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	84 60       	ori	r24, 0x04	; 4
    1b22:	80 83       	st	Z, r24
    1b24:	24 c1       	rjmp	.+584    	; 0x1d6e <TIMER1_init+0x30c>
		break;

	case COMPARE:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    1b26:	ef e4       	ldi	r30, 0x4F	; 79
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 73       	andi	r24, 0x3F	; 63
    1b2e:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    1b30:	ef e4       	ldi	r30, 0x4F	; 79
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8f 7c       	andi	r24, 0xCF	; 207
    1b38:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    1b3a:	ef e4       	ldi	r30, 0x4F	; 79
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    1b44:	ef e4       	ldi	r30, 0x4F	; 79
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	84 60       	ori	r24, 0x04	; 4
    1b4c:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Compare mode */
    1b4e:	ef e4       	ldi	r30, 0x4F	; 79
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8e 7f       	andi	r24, 0xFE	; 254
    1b56:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Compare mode */
    1b58:	ef e4       	ldi	r30, 0x4F	; 79
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8d 7f       	andi	r24, 0xFD	; 253
    1b60:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* Compare mode */
    1b62:	ee e4       	ldi	r30, 0x4E	; 78
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	88 60       	ori	r24, 0x08	; 8
    1b6a:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Compare mode */
    1b6c:	ee e4       	ldi	r30, 0x4E	; 78
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7e       	andi	r24, 0xEF	; 239
    1b74:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1A_bit = 1; /* Enable interrupt for compare mode unit A */
    1b76:	e9 e5       	ldi	r30, 0x59	; 89
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	80 61       	ori	r24, 0x10	; 16
    1b7e:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1B_bit = 1; /* Enable interrupt for compare mode unit B */
    1b80:	e9 e5       	ldi	r30, 0x59	; 89
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 60       	ori	r24, 0x08	; 8
    1b88:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value; /* Adjusting compare value */
    1b8a:	aa e4       	ldi	r26, 0x4A	; 74
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b90:	fe 81       	ldd	r31, Y+6	; 0x06
    1b92:	84 81       	ldd	r24, Z+4	; 0x04
    1b94:	95 81       	ldd	r25, Z+5	; 0x05
    1b96:	11 96       	adiw	r26, 0x01	; 1
    1b98:	9c 93       	st	X, r25
    1b9a:	8e 93       	st	-X, r24
    1b9c:	e8 c0       	rjmp	.+464    	; 0x1d6e <TIMER1_init+0x30c>
		break;

	case PWM_B:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    1b9e:	e1 e3       	ldi	r30, 0x31	; 49
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 61       	ori	r24, 0x10	; 16
    1ba6:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    1ba8:	ef e4       	ldi	r30, 0x4F	; 79
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 73       	andi	r24, 0x3F	; 63
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    1bb4:	ef e4       	ldi	r30, 0x4F	; 79
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8f 7c       	andi	r24, 0xCF	; 207
    1bbc:	80 62       	ori	r24, 0x20	; 32
    1bbe:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    1bc0:	ef e4       	ldi	r30, 0x4F	; 79
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	87 7f       	andi	r24, 0xF7	; 247
    1bc8:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    1bca:	ef e4       	ldi	r30, 0x4F	; 79
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8b 7f       	andi	r24, 0xFB	; 251
    1bd2:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 1; /* PWM mode TOP = OCR1A */
    1bd4:	ef e4       	ldi	r30, 0x4F	; 79
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	81 60       	ori	r24, 0x01	; 1
    1bdc:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    1bde:	ef e4       	ldi	r30, 0x4F	; 79
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	82 60       	ori	r24, 0x02	; 2
    1be6:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    1be8:	ee e4       	ldi	r30, 0x4E	; 78
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	88 60       	ori	r24, 0x08	; 8
    1bf0:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    1bf2:	ee e4       	ldi	r30, 0x4E	; 78
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	80 61       	ori	r24, 0x10	; 16
    1bfa:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value;
    1bfc:	aa e4       	ldi	r26, 0x4A	; 74
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ed 81       	ldd	r30, Y+5	; 0x05
    1c02:	fe 81       	ldd	r31, Y+6	; 0x06
    1c04:	84 81       	ldd	r24, Z+4	; 0x04
    1c06:	95 81       	ldd	r25, Z+5	; 0x05
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	9c 93       	st	X, r25
    1c0c:	8e 93       	st	-X, r24
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*OCR1A_R)/100);
    1c0e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c10:	fe 81       	ldd	r31, Y+6	; 0x06
    1c12:	87 81       	ldd	r24, Z+7	; 0x07
    1c14:	e8 2e       	mov	r14, r24
    1c16:	ff 24       	eor	r15, r15
    1c18:	00 e0       	ldi	r16, 0x00	; 0
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
    1c1c:	ea e4       	ldi	r30, 0x4A	; 74
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	9c 01       	movw	r18, r24
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	b7 01       	movw	r22, r14
    1c2e:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsi3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	24 e6       	ldi	r18, 0x64	; 100
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
    1c46:	da 01       	movw	r26, r20
    1c48:	c9 01       	movw	r24, r18
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01

		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    1c4e:	e8 e4       	ldi	r30, 0x48	; 72
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
    1c5a:	89 c0       	rjmp	.+274    	; 0x1d6e <TIMER1_init+0x30c>
		break;

	case PWM_AB:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    1c5c:	e1 e3       	ldi	r30, 0x31	; 49
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 61       	ori	r24, 0x10	; 16
    1c64:	80 83       	st	Z, r24
		DDRD_R.bit.DDRD5_bit = 1; /* PD4 output pin UNITA */
    1c66:	e1 e3       	ldi	r30, 0x31	; 49
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 62       	ori	r24, 0x20	; 32
    1c6e:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    1c70:	ef e4       	ldi	r30, 0x4F	; 79
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	8f 73       	andi	r24, 0x3F	; 63
    1c78:	80 68       	ori	r24, 0x80	; 128
    1c7a:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    1c7c:	ef e4       	ldi	r30, 0x4F	; 79
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 7c       	andi	r24, 0xCF	; 207
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    1c88:	ef e4       	ldi	r30, 0x4F	; 79
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	87 7f       	andi	r24, 0xF7	; 247
    1c90:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    1c92:	ef e4       	ldi	r30, 0x4F	; 79
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8b 7f       	andi	r24, 0xFB	; 251
    1c9a:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* PWM mode TOP = ICR1 */
    1c9c:	ef e4       	ldi	r30, 0x4F	; 79
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8e 7f       	andi	r24, 0xFE	; 254
    1ca4:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    1ca6:	ef e4       	ldi	r30, 0x4F	; 79
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	82 60       	ori	r24, 0x02	; 2
    1cae:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    1cb0:	ee e4       	ldi	r30, 0x4E	; 78
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 60       	ori	r24, 0x08	; 8
    1cb8:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 61       	ori	r24, 0x10	; 16
    1cc2:	80 83       	st	Z, r24

		ICR1_R = configurations->compare_value; /* Adjusting TOP value for PWM unit A and B */
    1cc4:	a6 e4       	ldi	r26, 0x46	; 70
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ed 81       	ldd	r30, Y+5	; 0x05
    1cca:	fe 81       	ldd	r31, Y+6	; 0x06
    1ccc:	84 81       	ldd	r24, Z+4	; 0x04
    1cce:	95 81       	ldd	r25, Z+5	; 0x05
    1cd0:	11 96       	adiw	r26, 0x01	; 1
    1cd2:	9c 93       	st	X, r25
    1cd4:	8e 93       	st	-X, r24
		dutyCycle_A = (uint16)(((uint32)(configurations->UNITA_dutyCycle)*ICR1_R)/100);
    1cd6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cd8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cda:	86 81       	ldd	r24, Z+6	; 0x06
    1cdc:	e8 2e       	mov	r14, r24
    1cde:	ff 24       	eor	r15, r15
    1ce0:	00 e0       	ldi	r16, 0x00	; 0
    1ce2:	10 e0       	ldi	r17, 0x00	; 0
    1ce4:	e6 e4       	ldi	r30, 0x46	; 70
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	9c 01       	movw	r18, r24
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	c8 01       	movw	r24, r16
    1cf4:	b7 01       	movw	r22, r14
    1cf6:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsi3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	24 e6       	ldi	r18, 0x64	; 100
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
    1d0e:	da 01       	movw	r26, r20
    1d10:	c9 01       	movw	r24, r18
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*ICR1_R)/100);
    1d16:	ed 81       	ldd	r30, Y+5	; 0x05
    1d18:	fe 81       	ldd	r31, Y+6	; 0x06
    1d1a:	87 81       	ldd	r24, Z+7	; 0x07
    1d1c:	e8 2e       	mov	r14, r24
    1d1e:	ff 24       	eor	r15, r15
    1d20:	00 e0       	ldi	r16, 0x00	; 0
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	e6 e4       	ldi	r30, 0x46	; 70
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	9c 01       	movw	r18, r24
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	c8 01       	movw	r24, r16
    1d34:	b7 01       	movw	r22, r14
    1d36:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsi3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	24 e6       	ldi	r18, 0x64	; 100
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
    1d4e:	da 01       	movw	r26, r20
    1d50:	c9 01       	movw	r24, r18
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01

		OCR1A_R = dutyCycle_A; /* Adjusting duty cycle for PWM unit A */
    1d56:	ea e4       	ldi	r30, 0x4A	; 74
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    1d62:	e8 e4       	ldi	r30, 0x48	; 72
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
		break;
	}

	/* Adjusting the pre-scaler */
	TCCR1B_R.bit.CS1_bit = configurations->prescaler;
    1d6e:	ae e4       	ldi	r26, 0x4E	; 78
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ed 81       	ldd	r30, Y+5	; 0x05
    1d74:	fe 81       	ldd	r31, Y+6	; 0x06
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
    1d78:	87 70       	andi	r24, 0x07	; 7
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	97 70       	andi	r25, 0x07	; 7
    1d7e:	8c 91       	ld	r24, X
    1d80:	88 7f       	andi	r24, 0xF8	; 248
    1d82:	89 2b       	or	r24, r25
    1d84:	8c 93       	st	X, r24

	/* Adjusting initial value */
	TCNT1_R = configurations->initial_value;
    1d86:	ac e4       	ldi	r26, 0x4C	; 76
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d8c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	11 96       	adiw	r26, 0x01	; 1
    1d94:	9c 93       	st	X, r25
    1d96:	8e 93       	st	-X, r24
}
    1d98:	28 96       	adiw	r28, 0x08	; 8
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	08 95       	ret

00001db2 <TIMER1_deInit>:


void TIMER1_deInit(void){
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62

	/* No clock source ( disable timer1 ) */
	TCCR1B_R.bit.CS1_bit = 0;
    1dba:	ee e4       	ldi	r30, 0x4E	; 78
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 7f       	andi	r24, 0xF8	; 248
    1dc2:	80 83       	st	Z, r24
}
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <TIMER1_setCallBack>:


void TIMER1_setCallBack(volatile void(*ptr)(void)){
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <TIMER1_setCallBack+0x6>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01

	g_callBackptr = ptr;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	90 93 75 01 	sts	0x0175, r25
    1de0:	80 93 74 01 	sts	0x0174, r24
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <DCmotor_init>:

/**********************************************************************
 *                           Function definition
 **********************************************************************/

void DCmotor_init(void){
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62

	/* Setup the two pins of motor to output pins */
	GPIO_setupPinDirection(IN1_PORT,IN1_PIN,PIN_OUTPUT);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	65 e0       	ldi	r22, 0x05	; 5
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT,IN2_PIN,PIN_OUTPUT);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <GPIO_setupPinDirection>

	/* Stop motor at beginning */
	GPIO_writePin(IN1_PORT,IN1_PIN,LOW);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	65 e0       	ldi	r22, 0x05	; 5
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
	GPIO_writePin(IN2_PORT,IN2_PIN,LOW);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	64 e0       	ldi	r22, 0x04	; 4
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <DCmotor_rotate>:

void DCmotor_rotate(DCmotor_state state,uint8 speed){
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <DCmotor_rotate+0x6>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <DCmotor_rotate+0x8>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	6a 83       	std	Y+2, r22	; 0x02

	switch(state){
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3c 83       	std	Y+4, r19	; 0x04
    1e3c:	2b 83       	std	Y+3, r18	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	b9 f0       	breq	.+46     	; 0x1e76 <DCmotor_rotate+0x52>
    1e48:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	01 f1       	breq	.+64     	; 0x1e92 <DCmotor_rotate+0x6e>
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	31 f5       	brne	.+76     	; 0x1ea6 <DCmotor_rotate+0x82>
	case CW:

		GPIO_writePin(IN1_PORT,IN1_PIN,HIGH);
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	65 e0       	ldi	r22, 0x05	; 5
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOW);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	64 e0       	ldi	r22, 0x04	; 4
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
		PWM_timer0_start(speed);
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_timer0_start>
    1e74:	18 c0       	rjmp	.+48     	; 0x1ea6 <DCmotor_rotate+0x82>
		break;
	case A_CW:
		GPIO_writePin(IN1_PORT,IN1_PIN,LOW);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	65 e0       	ldi	r22, 0x05	; 5
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,HIGH);
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	64 e0       	ldi	r22, 0x04	; 4
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
		PWM_timer0_start(speed);
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_timer0_start>
    1e90:	0a c0       	rjmp	.+20     	; 0x1ea6 <DCmotor_rotate+0x82>
		break;
	case STOP_MOTOR:
		GPIO_writePin(IN1_PORT,IN1_PIN,LOW);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOW);
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	64 e0       	ldi	r22, 0x04	; 4
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
		break;
	}
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <BUZZER_init>:

/****************************************************************************
 *                          Functions definitions
 ****************************************************************************/

void BUZZER_init(void){
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62

	/* Setup buzzer pin to be output pin */
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <GPIO_setupPinDirection>

	/* Initial value foe buzzer = zero */
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOW);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <BUZZER_on>:

void BUZZER_on(void){
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,HIGH);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <BUZZER_off>:

void BUZZER_off(void){
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOW);
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_writePin>
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <EEPROM_init>:

/****************************************************************************
 *                          Functions definition
 ***************************************************************************/

void EEPROM_init(void){
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62

	TWI_init(&g_configs);
    1f0e:	88 e6       	ldi	r24, 0x68	; 104
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_init>

}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16add,uint8 u8data){
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <EEPROM_writeByte+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <EEPROM_writeByte+0x8>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    1f2e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_start>

	if(TWI_getStatus() != TWI_STATUS_START)
    1f32:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1f36:	88 30       	cpi	r24, 0x08	; 8
    1f38:	11 f0       	breq	.+4      	; 0x1f3e <EEPROM_writeByte+0x22>
		return ERROR;
    1f3a:	1c 82       	std	Y+4, r1	; 0x04
    1f3c:	28 c0       	rjmp	.+80     	; 0x1f8e <EEPROM_writeByte+0x72>

	/*
	 *  Take A8 A9 A10 bits from memory address to device address
	 *  (RW bit = 0 (write))
	 * */
	TWI_writeByte((uint8) (0xA0 | ((u16add & 0x0700)>>7)) );
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	80 70       	andi	r24, 0x00	; 0
    1f44:	97 70       	andi	r25, 0x07	; 7
    1f46:	88 0f       	add	r24, r24
    1f48:	89 2f       	mov	r24, r25
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	99 0b       	sbc	r25, r25
    1f4e:	91 95       	neg	r25
    1f50:	80 6a       	ori	r24, 0xA0	; 160
    1f52:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_SLA_W_ACK)
    1f56:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1f5a:	88 31       	cpi	r24, 0x18	; 24
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <EEPROM_writeByte+0x46>
		return ERROR;
    1f5e:	1c 82       	std	Y+4, r1	; 0x04
    1f60:	16 c0       	rjmp	.+44     	; 0x1f8e <EEPROM_writeByte+0x72>

	/* Send memory address to store in */
	TWI_writeByte((uint8) u16add );
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_DATA_ACK)
    1f68:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1f6c:	88 32       	cpi	r24, 0x28	; 40
    1f6e:	11 f0       	breq	.+4      	; 0x1f74 <EEPROM_writeByte+0x58>
		return ERROR;
    1f70:	1c 82       	std	Y+4, r1	; 0x04
    1f72:	0d c0       	rjmp	.+26     	; 0x1f8e <EEPROM_writeByte+0x72>

	/* Write data in the EEPROM memory */
	TWI_writeByte(u8data);
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_DATA_ACK)
    1f7a:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1f7e:	88 32       	cpi	r24, 0x28	; 40
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <EEPROM_writeByte+0x6a>
		return ERROR;
    1f82:	1c 82       	std	Y+4, r1	; 0x04
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <EEPROM_writeByte+0x72>

	TWI_stop();
    1f86:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_stop>

	return SUCCESS;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	8c 83       	std	Y+4, r24	; 0x04
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16add,uint8* data){
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <EEPROM_readByte+0x6>
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <EEPROM_readByte+0x8>
    1fa6:	0f 92       	push	r0
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	7c 83       	std	Y+4, r23	; 0x04
    1fb2:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    1fb4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_start>

	if(TWI_getStatus() != TWI_STATUS_START)
    1fb8:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1fbc:	88 30       	cpi	r24, 0x08	; 8
    1fbe:	11 f0       	breq	.+4      	; 0x1fc4 <EEPROM_readByte+0x26>
		return ERROR;
    1fc0:	1d 82       	std	Y+5, r1	; 0x05
    1fc2:	44 c0       	rjmp	.+136    	; 0x204c <EEPROM_readByte+0xae>

	/*
	 *  Take A8 A9 A10 bits from memory address to device address
	 *  (RW bit = 0 (write))
	 * */
	TWI_writeByte((uint8) (0xA0 | ((u16add & 0x0700)>>7)) );
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	80 70       	andi	r24, 0x00	; 0
    1fca:	97 70       	andi	r25, 0x07	; 7
    1fcc:	88 0f       	add	r24, r24
    1fce:	89 2f       	mov	r24, r25
    1fd0:	88 1f       	adc	r24, r24
    1fd2:	99 0b       	sbc	r25, r25
    1fd4:	91 95       	neg	r25
    1fd6:	80 6a       	ori	r24, 0xA0	; 160
    1fd8:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_SLA_W_ACK)
    1fdc:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1fe0:	88 31       	cpi	r24, 0x18	; 24
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <EEPROM_readByte+0x4a>
		return ERROR;
    1fe4:	1d 82       	std	Y+5, r1	; 0x05
    1fe6:	32 c0       	rjmp	.+100    	; 0x204c <EEPROM_readByte+0xae>

	/* Send memory address to store in */
	TWI_writeByte((uint8) u16add );
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_DATA_ACK)
    1fee:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    1ff2:	88 32       	cpi	r24, 0x28	; 40
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <EEPROM_readByte+0x5c>
		return ERROR;
    1ff6:	1d 82       	std	Y+5, r1	; 0x05
    1ff8:	29 c0       	rjmp	.+82     	; 0x204c <EEPROM_readByte+0xae>

	TWI_start();
    1ffa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_start>

	if(TWI_getStatus() != TWI_STATUS_REPEATED_START)
    1ffe:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    2002:	80 31       	cpi	r24, 0x10	; 16
    2004:	11 f0       	breq	.+4      	; 0x200a <EEPROM_readByte+0x6c>
		return ERROR;
    2006:	1d 82       	std	Y+5, r1	; 0x05
    2008:	21 c0       	rjmp	.+66     	; 0x204c <EEPROM_readByte+0xae>

	/*
	 *  Take A8 A9 A10 bits from memory address to device address
	 *  (RW bit = 1 (read))
	 * */
	TWI_writeByte((uint8) (0xA0 | ((u16add & 0x0700)>>7) | 1) );
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	80 70       	andi	r24, 0x00	; 0
    2010:	97 70       	andi	r25, 0x07	; 7
    2012:	88 0f       	add	r24, r24
    2014:	89 2f       	mov	r24, r25
    2016:	88 1f       	adc	r24, r24
    2018:	99 0b       	sbc	r25, r25
    201a:	91 95       	neg	r25
    201c:	81 6a       	ori	r24, 0xA1	; 161
    201e:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_SLA_R_ACK)
    2022:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    2026:	80 34       	cpi	r24, 0x40	; 64
    2028:	11 f0       	breq	.+4      	; 0x202e <EEPROM_readByte+0x90>
		return ERROR;
    202a:	1d 82       	std	Y+5, r1	; 0x05
    202c:	0f c0       	rjmp	.+30     	; 0x204c <EEPROM_readByte+0xae>

	*data = TWI_readByteWithNACK();
    202e:	0e 94 11 08 	call	0x1022	; 0x1022 <TWI_readByteWithNACK>
    2032:	eb 81       	ldd	r30, Y+3	; 0x03
    2034:	fc 81       	ldd	r31, Y+4	; 0x04
    2036:	80 83       	st	Z, r24

	if(TWI_getStatus() != TWI_STATUS_MR_DATA_NACK)
    2038:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_getStatus>
    203c:	88 35       	cpi	r24, 0x58	; 88
    203e:	11 f0       	breq	.+4      	; 0x2044 <EEPROM_readByte+0xa6>
		return ERROR;
    2040:	1d 82       	std	Y+5, r1	; 0x05
    2042:	04 c0       	rjmp	.+8      	; 0x204c <EEPROM_readByte+0xae>

	TWI_stop();
    2044:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_stop>

	return SUCCESS;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <main>:

/***************************************************************************
 *                               APPLICATION
 *****************************************************************************/

int main(void){
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <main+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <main+0x8>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62

	SREG_R.bit.I_bit = 1;
    206a:	ef e5       	ldi	r30, 0x5F	; 95
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	80 68       	ori	r24, 0x80	; 128
    2072:	80 83       	st	Z, r24

	/* Variable containing  open door option or change password option */
	uint8 option;

	/* Number of consecutive times user enters wrong password */
	uint8 wrong_consecutive=0;
    2074:	19 82       	std	Y+1, r1	; 0x01

	UART_init(&g_UART_configurations);
    2076:	8d e6       	ldi	r24, 0x6D	; 109
    2078:	91 e0       	ldi	r25, 0x01	; 1
    207a:	0e 94 3a 08 	call	0x1074	; 0x1074 <UART_init>
	BUZZER_init();
    207e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <BUZZER_init>
	EEPROM_init();
    2082:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <EEPROM_init>
	DCmotor_init();
    2086:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <DCmotor_init>

	g_TIMER1_configurations.mode = COMPARE;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	80 93 82 01 	sts	0x0182, r24
	g_TIMER1_configurations.prescaler = FACTOR1024;
    2090:	85 e0       	ldi	r24, 0x05	; 5
    2092:	80 93 83 01 	sts	0x0183, r24
	g_TIMER1_configurations.compare_value = 23500; /* 3 SECONDS */
    2096:	8c ec       	ldi	r24, 0xCC	; 204
    2098:	9b e5       	ldi	r25, 0x5B	; 91
    209a:	90 93 87 01 	sts	0x0187, r25
    209e:	80 93 86 01 	sts	0x0186, r24
	g_TIMER1_configurations.initial_value = 0;
    20a2:	10 92 85 01 	sts	0x0185, r1
    20a6:	10 92 84 01 	sts	0x0184, r1

	/* Go to first state */
	currentState = CREATE_PASSWORD;
    20aa:	10 92 77 01 	sts	0x0177, r1

	while(1){

		switch(currentState)
    20ae:	80 91 77 01 	lds	r24, 0x0177
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	3c 83       	std	Y+4, r19	; 0x04
    20b8:	2b 83       	std	Y+3, r18	; 0x03
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	82 30       	cpi	r24, 0x02	; 2
    20c0:	91 05       	cpc	r25, r1
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <main+0x68>
    20c4:	a4 c0       	rjmp	.+328    	; 0x220e <main+0x1b0>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	23 30       	cpi	r18, 0x03	; 3
    20cc:	31 05       	cpc	r19, r1
    20ce:	54 f4       	brge	.+20     	; 0x20e4 <main+0x86>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	91 f0       	breq	.+36     	; 0x20fc <main+0x9e>
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	21 30       	cpi	r18, 0x01	; 1
    20de:	31 05       	cpc	r19, r1
    20e0:	79 f1       	breq	.+94     	; 0x2140 <main+0xe2>
    20e2:	e5 cf       	rjmp	.-54     	; 0x20ae <main+0x50>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	83 30       	cpi	r24, 0x03	; 3
    20ea:	91 05       	cpc	r25, r1
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <main+0x92>
    20ee:	9f c0       	rjmp	.+318    	; 0x222e <main+0x1d0>
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	24 30       	cpi	r18, 0x04	; 4
    20f6:	31 05       	cpc	r19, r1
    20f8:	51 f1       	breq	.+84     	; 0x214e <main+0xf0>
    20fa:	d9 cf       	rjmp	.-78     	; 0x20ae <main+0x50>
		{
		case CREATE_PASSWORD:

			APP_receivePassword(g_password1);
    20fc:	8d e7       	ldi	r24, 0x7D	; 125
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	0e 94 2b 11 	call	0x2256	; 0x2256 <APP_receivePassword>

			APP_receivePassword(g_password2);
    2104:	80 e9       	ldi	r24, 0x90	; 144
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	0e 94 2b 11 	call	0x2256	; 0x2256 <APP_receivePassword>

			/* Check if the password matching */
			APP_checkPasswords(g_password1,g_password2);
    210c:	8d e7       	ldi	r24, 0x7D	; 125
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	20 e9       	ldi	r18, 0x90	; 144
    2112:	31 e0       	ldi	r19, 0x01	; 1
    2114:	b9 01       	movw	r22, r18
    2116:	0e 94 bf 12 	call	0x257e	; 0x257e <APP_checkPasswords>
			/*
			 *  If the two passwords matched go to next state and save either
			 *  one to the EEPROM
			 *  else : repeat CREATE_PASSWORD state
			 */
			if(matching == 1)
    211a:	80 91 72 01 	lds	r24, 0x0172
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	49 f4       	brne	.+18     	; 0x2134 <main+0xd6>
			{
				UART_sendByte(MAIN_OPTIONS);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
				currentState = MAIN_OPTIONS;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	80 93 77 01 	sts	0x0177, r24

				APP_writePassword_EEPROM();
    212e:	0e 94 1b 12 	call	0x2436	; 0x2436 <APP_writePassword_EEPROM>
    2132:	bd cf       	rjmp	.-134    	; 0x20ae <main+0x50>
			}
			else
			{
				UART_sendByte(CREATE_PASSWORD);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
				currentState = CREATE_PASSWORD;
    213a:	10 92 77 01 	sts	0x0177, r1
    213e:	b7 cf       	rjmp	.-146    	; 0x20ae <main+0x50>
			break;

		case MAIN_OPTIONS:

			/* Receive the user's option */
			option = UART_receiveByte();
    2140:	0e 94 df 08 	call	0x11be	; 0x11be <UART_receiveByte>
    2144:	8a 83       	std	Y+2, r24	; 0x02

			currentState = ENTER_PASSWORD;
    2146:	84 e0       	ldi	r24, 0x04	; 4
    2148:	80 93 77 01 	sts	0x0177, r24
    214c:	b0 cf       	rjmp	.-160    	; 0x20ae <main+0x50>

			break;

		case ENTER_PASSWORD:

			if(option == '+')
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	8b 32       	cpi	r24, 0x2B	; 43
    2152:	69 f5       	brne	.+90     	; 0x21ae <main+0x150>
			{
				APP_receivePassword(g_enteredPassword);
    2154:	88 e7       	ldi	r24, 0x78	; 120
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	0e 94 2b 11 	call	0x2256	; 0x2256 <APP_receivePassword>

				APP_readPassword_EEPROM();
    215c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <APP_readPassword_EEPROM>

				APP_checkPasswords(g_enteredPassword,g_savedPassword);
    2160:	88 e7       	ldi	r24, 0x78	; 120
    2162:	91 e0       	ldi	r25, 0x01	; 1
    2164:	2b e8       	ldi	r18, 0x8B	; 139
    2166:	31 e0       	ldi	r19, 0x01	; 1
    2168:	b9 01       	movw	r22, r18
    216a:	0e 94 bf 12 	call	0x257e	; 0x257e <APP_checkPasswords>
				 * if it doesn't match then increment
				 * wrong-consecutive and check if it was the third time
				 * to go to error state
				 *
				 * */
				if(matching == 1)
    216e:	80 91 72 01 	lds	r24, 0x0172
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	41 f4       	brne	.+16     	; 0x2186 <main+0x128>
				{
					UART_sendByte(OPEN_DOOR);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
					currentState = OPEN_DOOR;
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	80 93 77 01 	sts	0x0177, r24
					wrong_consecutive = 0;
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	94 cf       	rjmp	.-216    	; 0x20ae <main+0x50>
				}
				else
				{
					wrong_consecutive++;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	89 83       	std	Y+1, r24	; 0x01
					if(wrong_consecutive == 3)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	83 30       	cpi	r24, 0x03	; 3
    2190:	39 f4       	brne	.+14     	; 0x21a0 <main+0x142>
					{
						UART_sendByte(WRONG_PASSWORD);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
						currentState = WRONG_PASSWORD;
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	80 93 77 01 	sts	0x0177, r24
    219e:	87 cf       	rjmp	.-242    	; 0x20ae <main+0x50>
					}
					else
					{
						UART_sendByte(ENTER_PASSWORD);
    21a0:	84 e0       	ldi	r24, 0x04	; 4
    21a2:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
						currentState = ENTER_PASSWORD;
    21a6:	84 e0       	ldi	r24, 0x04	; 4
    21a8:	80 93 77 01 	sts	0x0177, r24
    21ac:	80 cf       	rjmp	.-256    	; 0x20ae <main+0x50>
					}
				}
			}
			else if(option == '-')
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	8d 32       	cpi	r24, 0x2D	; 45
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <main+0x158>
    21b4:	7c cf       	rjmp	.-264    	; 0x20ae <main+0x50>
			{
				APP_receivePassword(g_enteredPassword);
    21b6:	88 e7       	ldi	r24, 0x78	; 120
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	0e 94 2b 11 	call	0x2256	; 0x2256 <APP_receivePassword>

				APP_readPassword_EEPROM();
    21be:	0e 94 78 11 	call	0x22f0	; 0x22f0 <APP_readPassword_EEPROM>

				APP_checkPasswords(g_enteredPassword,g_savedPassword);
    21c2:	88 e7       	ldi	r24, 0x78	; 120
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	2b e8       	ldi	r18, 0x8B	; 139
    21c8:	31 e0       	ldi	r19, 0x01	; 1
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 bf 12 	call	0x257e	; 0x257e <APP_checkPasswords>
				 * if it doesn't match then increment
				 * wrong-consecutive and check if it was the third time
				 * to go to error state
				 *
				 * */
				if(matching == 1)
    21d0:	80 91 72 01 	lds	r24, 0x0172
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	39 f4       	brne	.+14     	; 0x21e6 <main+0x188>
				{
					currentState = CREATE_PASSWORD;
    21d8:	10 92 77 01 	sts	0x0177, r1
					UART_sendByte(CREATE_PASSWORD);
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
					wrong_consecutive = 0;
    21e2:	19 82       	std	Y+1, r1	; 0x01
    21e4:	64 cf       	rjmp	.-312    	; 0x20ae <main+0x50>
				}
				else
				{
					wrong_consecutive++;
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	89 83       	std	Y+1, r24	; 0x01
					if(wrong_consecutive == 3)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	39 f4       	brne	.+14     	; 0x2200 <main+0x1a2>
					{
						UART_sendByte(WRONG_PASSWORD);
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
						currentState = WRONG_PASSWORD;
    21f8:	83 e0       	ldi	r24, 0x03	; 3
    21fa:	80 93 77 01 	sts	0x0177, r24
    21fe:	57 cf       	rjmp	.-338    	; 0x20ae <main+0x50>
					}
					else
					{
						UART_sendByte(ENTER_PASSWORD);
    2200:	84 e0       	ldi	r24, 0x04	; 4
    2202:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
						currentState = ENTER_PASSWORD;
    2206:	84 e0       	ldi	r24, 0x04	; 4
    2208:	80 93 77 01 	sts	0x0177, r24
    220c:	50 cf       	rjmp	.-352    	; 0x20ae <main+0x50>
			}
			break;

		case OPEN_DOOR:

			TIMER1_setCallBack(APP_gateControl);
    220e:	88 ef       	ldi	r24, 0xF8	; 248
    2210:	92 e1       	ldi	r25, 0x12	; 18
    2212:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <TIMER1_setCallBack>
			DCmotor_rotate(CW,100);
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	64 e6       	ldi	r22, 0x64	; 100
    221a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <DCmotor_rotate>
			TIMER1_init(&g_TIMER1_configurations);
    221e:	82 e8       	ldi	r24, 0x82	; 130
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <TIMER1_init>

			/* Wait for timer to finish door processing in Main options for next state */
			currentState = MAIN_OPTIONS;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 93 77 01 	sts	0x0177, r24
    222c:	40 cf       	rjmp	.-384    	; 0x20ae <main+0x50>
			break;

		case WRONG_PASSWORD:

			BUZZER_on();
    222e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <BUZZER_on>
			TIMER1_setCallBack(APP_errorControl);
    2232:	82 e2       	ldi	r24, 0x22	; 34
    2234:	93 e1       	ldi	r25, 0x13	; 19
    2236:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <TIMER1_setCallBack>
			g_TIMER1_configurations.compare_value = 47000; /* 6 SECONDS */
    223a:	88 e9       	ldi	r24, 0x98	; 152
    223c:	97 eb       	ldi	r25, 0xB7	; 183
    223e:	90 93 87 01 	sts	0x0187, r25
    2242:	80 93 86 01 	sts	0x0186, r24
			TIMER1_init(&g_TIMER1_configurations);
    2246:	82 e8       	ldi	r24, 0x82	; 130
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <TIMER1_init>

			/* Wait for timer to finish error processing in Main options for next state */
			currentState = MAIN_OPTIONS;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	80 93 77 01 	sts	0x0177, r24
    2254:	2c cf       	rjmp	.-424    	; 0x20ae <main+0x50>

00002256 <APP_receivePassword>:
}

/***************************************************************************
 *                           Functions definition
 ***************************************************************************/
void APP_receivePassword(uint8* pass){
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <APP_receivePassword+0xa>
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Receive password
	 */
	for(i=0;i<5;i++){
    2268:	10 92 8a 01 	sts	0x018A, r1
    226c:	12 c0       	rjmp	.+36     	; 0x2292 <APP_receivePassword+0x3c>
		pass[i] = UART_receiveByte();
    226e:	80 91 8a 01 	lds	r24, 0x018A
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	8c 01       	movw	r16, r24
    227c:	02 0f       	add	r16, r18
    227e:	13 1f       	adc	r17, r19
    2280:	0e 94 df 08 	call	0x11be	; 0x11be <UART_receiveByte>
    2284:	f8 01       	movw	r30, r16
    2286:	80 83       	st	Z, r24
void APP_receivePassword(uint8* pass){

	/*
	 * Receive password
	 */
	for(i=0;i<5;i++){
    2288:	80 91 8a 01 	lds	r24, 0x018A
    228c:	8f 5f       	subi	r24, 0xFF	; 255
    228e:	80 93 8a 01 	sts	0x018A, r24
    2292:	80 91 8a 01 	lds	r24, 0x018A
    2296:	85 30       	cpi	r24, 0x05	; 5
    2298:	50 f3       	brcs	.-44     	; 0x226e <APP_receivePassword+0x18>
		pass[i] = UART_receiveByte();
	}
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	08 95       	ret

000022a8 <APP_sendPassword>:


void APP_sendPassword(uint8* pass){
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <APP_sendPassword+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Send the password
	 */
	for(i=0;i<5;i++){
    22b6:	10 92 8a 01 	sts	0x018A, r1
    22ba:	11 c0       	rjmp	.+34     	; 0x22de <APP_sendPassword+0x36>
		UART_sendByte(pass[i]);
    22bc:	80 91 8a 01 	lds	r24, 0x018A
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	fc 01       	movw	r30, r24
    22ca:	e2 0f       	add	r30, r18
    22cc:	f3 1f       	adc	r31, r19
    22ce:	80 81       	ld	r24, Z
    22d0:	0e 94 cb 08 	call	0x1196	; 0x1196 <UART_sendByte>
void APP_sendPassword(uint8* pass){

	/*
	 * Send the password
	 */
	for(i=0;i<5;i++){
    22d4:	80 91 8a 01 	lds	r24, 0x018A
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	80 93 8a 01 	sts	0x018A, r24
    22de:	80 91 8a 01 	lds	r24, 0x018A
    22e2:	85 30       	cpi	r24, 0x05	; 5
    22e4:	58 f3       	brcs	.-42     	; 0x22bc <APP_sendPassword+0x14>
		UART_sendByte(pass[i]);
	}
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <APP_readPassword_EEPROM>:

/* Function to read the saved password from EEPROM */
void APP_readPassword_EEPROM(void){
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	2e 97       	sbiw	r28, 0x0e	; 14
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61

	for(i=0;i<5;i++){
    2304:	10 92 8a 01 	sts	0x018A, r1
    2308:	88 c0       	rjmp	.+272    	; 0x241a <APP_readPassword_EEPROM+0x12a>
		EEPROM_readByte((0x0017 + i),&g_savedPassword[i]);
    230a:	80 91 8a 01 	lds	r24, 0x018A
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	47 96       	adiw	r24, 0x17	; 23
    2314:	ac 01       	movw	r20, r24
    2316:	80 91 8a 01 	lds	r24, 0x018A
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9c 01       	movw	r18, r24
    2320:	25 57       	subi	r18, 0x75	; 117
    2322:	3e 4f       	sbci	r19, 0xFE	; 254
    2324:	ca 01       	movw	r24, r20
    2326:	b9 01       	movw	r22, r18
    2328:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <EEPROM_readByte>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e2       	ldi	r26, 0x20	; 32
    2332:	b1 e4       	ldi	r27, 0x41	; 65
    2334:	8b 87       	std	Y+11, r24	; 0x0b
    2336:	9c 87       	std	Y+12, r25	; 0x0c
    2338:	ad 87       	std	Y+13, r26	; 0x0d
    233a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8f 83       	std	Y+7, r24	; 0x07
    2356:	98 87       	std	Y+8, r25	; 0x08
    2358:	a9 87       	std	Y+9, r26	; 0x09
    235a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <APP_readPassword_EEPROM+0x8e>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <APP_readPassword_EEPROM+0x10c>
	else if (__tmp > 65535)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <APP_readPassword_EEPROM+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6b 85       	ldd	r22, Y+11	; 0x0b
    2398:	7c 85       	ldd	r23, Y+12	; 0x0c
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	0f c0       	rjmp	.+30     	; 0x23de <APP_readPassword_EEPROM+0xee>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <APP_readPassword_EEPROM+0xdc>
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <APP_readPassword_EEPROM+0xd0>
    23e6:	14 c0       	rjmp	.+40     	; 0x2410 <APP_readPassword_EEPROM+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <APP_readPassword_EEPROM+0x118>
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
}

/* Function to read the saved password from EEPROM */
void APP_readPassword_EEPROM(void){

	for(i=0;i<5;i++){
    2410:	80 91 8a 01 	lds	r24, 0x018A
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	80 93 8a 01 	sts	0x018A, r24
    241a:	80 91 8a 01 	lds	r24, 0x018A
    241e:	85 30       	cpi	r24, 0x05	; 5
    2420:	08 f4       	brcc	.+2      	; 0x2424 <APP_readPassword_EEPROM+0x134>
    2422:	73 cf       	rjmp	.-282    	; 0x230a <APP_readPassword_EEPROM+0x1a>
		EEPROM_readByte((0x0017 + i),&g_savedPassword[i]);
		_delay_ms(10);
	}
}
    2424:	2e 96       	adiw	r28, 0x0e	; 14
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <APP_writePassword_EEPROM>:

/* Function to save password in the EEPROM */
void APP_writePassword_EEPROM(void){
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	2e 97       	sbiw	r28, 0x0e	; 14
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61

	for(i=0;i<5;i++){
    244a:	10 92 8a 01 	sts	0x018A, r1
    244e:	89 c0       	rjmp	.+274    	; 0x2562 <APP_writePassword_EEPROM+0x12c>
		EEPROM_writeByte((0x0017 + i),g_password1[i]);
    2450:	80 91 8a 01 	lds	r24, 0x018A
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	47 96       	adiw	r24, 0x17	; 23
    245a:	ac 01       	movw	r20, r24
    245c:	80 91 8a 01 	lds	r24, 0x018A
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	fc 01       	movw	r30, r24
    2466:	e3 58       	subi	r30, 0x83	; 131
    2468:	fe 4f       	sbci	r31, 0xFE	; 254
    246a:	20 81       	ld	r18, Z
    246c:	ca 01       	movw	r24, r20
    246e:	62 2f       	mov	r22, r18
    2470:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <EEPROM_writeByte>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e2       	ldi	r26, 0x20	; 32
    247a:	b1 e4       	ldi	r27, 0x41	; 65
    247c:	8b 87       	std	Y+11, r24	; 0x0b
    247e:	9c 87       	std	Y+12, r25	; 0x0c
    2480:	ad 87       	std	Y+13, r26	; 0x0d
    2482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6b 85       	ldd	r22, Y+11	; 0x0b
    2486:	7c 85       	ldd	r23, Y+12	; 0x0c
    2488:	8d 85       	ldd	r24, Y+13	; 0x0d
    248a:	9e 85       	ldd	r25, Y+14	; 0x0e
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a ef       	ldi	r20, 0xFA	; 250
    2492:	54 e4       	ldi	r21, 0x44	; 68
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8f 83       	std	Y+7, r24	; 0x07
    249e:	98 87       	std	Y+8, r25	; 0x08
    24a0:	a9 87       	std	Y+9, r26	; 0x09
    24a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <APP_writePassword_EEPROM+0x90>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <APP_writePassword_EEPROM+0x10e>
	else if (__tmp > 65535)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <APP_writePassword_EEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <APP_writePassword_EEPROM+0xf0>
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <APP_writePassword_EEPROM+0xde>
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <APP_writePassword_EEPROM+0xd2>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <APP_writePassword_EEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	6f 81       	ldd	r22, Y+7	; 0x07
    2532:	78 85       	ldd	r23, Y+8	; 0x08
    2534:	89 85       	ldd	r24, Y+9	; 0x09
    2536:	9a 85       	ldd	r25, Y+10	; 0x0a
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <APP_writePassword_EEPROM+0x11a>
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
}

/* Function to save password in the EEPROM */
void APP_writePassword_EEPROM(void){

	for(i=0;i<5;i++){
    2558:	80 91 8a 01 	lds	r24, 0x018A
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	80 93 8a 01 	sts	0x018A, r24
    2562:	80 91 8a 01 	lds	r24, 0x018A
    2566:	85 30       	cpi	r24, 0x05	; 5
    2568:	08 f4       	brcc	.+2      	; 0x256c <APP_writePassword_EEPROM+0x136>
    256a:	72 cf       	rjmp	.-284    	; 0x2450 <APP_writePassword_EEPROM+0x1a>
		EEPROM_writeByte((0x0017 + i),g_password1[i]);
		_delay_ms(10);
	}
}
    256c:	2e 96       	adiw	r28, 0x0e	; 14
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <APP_checkPasswords>:

/* Function to check the two passed passwords */
void APP_checkPasswords(uint8* pass1,uint8* pass2){
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <APP_checkPasswords+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <APP_checkPasswords+0x8>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	7c 83       	std	Y+4, r23	; 0x04
    2590:	6b 83       	std	Y+3, r22	; 0x03

	matching = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 93 72 01 	sts	0x0172, r24

	/* Check if two passwords matching */
	for(i=0;i<5;i++){
    2598:	10 92 8a 01 	sts	0x018A, r1
    259c:	1e c0       	rjmp	.+60     	; 0x25da <APP_checkPasswords+0x5c>
		if(pass1[i] != pass2[i]){
    259e:	80 91 8a 01 	lds	r24, 0x018A
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	fc 01       	movw	r30, r24
    25ac:	e2 0f       	add	r30, r18
    25ae:	f3 1f       	adc	r31, r19
    25b0:	40 81       	ld	r20, Z
    25b2:	80 91 8a 01 	lds	r24, 0x018A
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	fc 01       	movw	r30, r24
    25c0:	e2 0f       	add	r30, r18
    25c2:	f3 1f       	adc	r31, r19
    25c4:	80 81       	ld	r24, Z
    25c6:	48 17       	cp	r20, r24
    25c8:	19 f0       	breq	.+6      	; 0x25d0 <APP_checkPasswords+0x52>
			matching = 0;
    25ca:	10 92 72 01 	sts	0x0172, r1
    25ce:	09 c0       	rjmp	.+18     	; 0x25e2 <APP_checkPasswords+0x64>
void APP_checkPasswords(uint8* pass1,uint8* pass2){

	matching = 1;

	/* Check if two passwords matching */
	for(i=0;i<5;i++){
    25d0:	80 91 8a 01 	lds	r24, 0x018A
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	80 93 8a 01 	sts	0x018A, r24
    25da:	80 91 8a 01 	lds	r24, 0x018A
    25de:	85 30       	cpi	r24, 0x05	; 5
    25e0:	f0 f2       	brcs	.-68     	; 0x259e <APP_checkPasswords+0x20>
		if(pass1[i] != pass2[i]){
			matching = 0;
			break;
		}
	}
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <APP_gateControl>:


void APP_gateControl(void){
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62

	tick++; /* Every tick means 3 seconds has passed */
    25f8:	80 91 76 01 	lds	r24, 0x0176
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	80 93 76 01 	sts	0x0176, r24

	if(tick == 5) /* 15 seconds passed */
    2602:	80 91 76 01 	lds	r24, 0x0176
    2606:	85 30       	cpi	r24, 0x05	; 5
    2608:	29 f4       	brne	.+10     	; 0x2614 <APP_gateControl+0x24>
	{
		DCmotor_rotate(STOP_MOTOR,0);
    260a:	82 e0       	ldi	r24, 0x02	; 2
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <DCmotor_rotate>
    2612:	15 c0       	rjmp	.+42     	; 0x263e <APP_gateControl+0x4e>
	}
	else if(tick == 6) /* 18 seconds passed */
    2614:	80 91 76 01 	lds	r24, 0x0176
    2618:	86 30       	cpi	r24, 0x06	; 6
    261a:	29 f4       	brne	.+10     	; 0x2626 <APP_gateControl+0x36>
	{
		DCmotor_rotate(A_CW,100);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	64 e6       	ldi	r22, 0x64	; 100
    2620:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <DCmotor_rotate>
    2624:	0c c0       	rjmp	.+24     	; 0x263e <APP_gateControl+0x4e>
	}
	else if(tick == 11) /* After another 15 seconds */
    2626:	80 91 76 01 	lds	r24, 0x0176
    262a:	8b 30       	cpi	r24, 0x0B	; 11
    262c:	41 f4       	brne	.+16     	; 0x263e <APP_gateControl+0x4e>
	{
		DCmotor_rotate(STOP_MOTOR,0);
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <DCmotor_rotate>
		TIMER1_deInit();
    2636:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <TIMER1_deInit>
		tick = 0;
    263a:	10 92 76 01 	sts	0x0176, r1
	}
}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <APP_errorControl>:

void APP_errorControl(void){
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62

	tick++; /* Every tick means 6 seconds has passed */
    264c:	80 91 76 01 	lds	r24, 0x0176
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	80 93 76 01 	sts	0x0176, r24


	if(tick == 10) /* 60 seconds passed */
    2656:	80 91 76 01 	lds	r24, 0x0176
    265a:	8a 30       	cpi	r24, 0x0A	; 10
    265c:	61 f4       	brne	.+24     	; 0x2676 <APP_errorControl+0x32>
	{
		BUZZER_off();
    265e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <BUZZER_off>
		g_TIMER1_configurations.compare_value = 23500; /* 3 SECONDS again */
    2662:	8c ec       	ldi	r24, 0xCC	; 204
    2664:	9b e5       	ldi	r25, 0x5B	; 91
    2666:	90 93 87 01 	sts	0x0187, r25
    266a:	80 93 86 01 	sts	0x0186, r24
		TIMER1_deInit();
    266e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <TIMER1_deInit>
		tick = 0;
    2672:	10 92 76 01 	sts	0x0176, r1
	}
}
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <__mulsi3>:
    267c:	62 9f       	mul	r22, r18
    267e:	d0 01       	movw	r26, r0
    2680:	73 9f       	mul	r23, r19
    2682:	f0 01       	movw	r30, r0
    2684:	82 9f       	mul	r24, r18
    2686:	e0 0d       	add	r30, r0
    2688:	f1 1d       	adc	r31, r1
    268a:	64 9f       	mul	r22, r20
    268c:	e0 0d       	add	r30, r0
    268e:	f1 1d       	adc	r31, r1
    2690:	92 9f       	mul	r25, r18
    2692:	f0 0d       	add	r31, r0
    2694:	83 9f       	mul	r24, r19
    2696:	f0 0d       	add	r31, r0
    2698:	74 9f       	mul	r23, r20
    269a:	f0 0d       	add	r31, r0
    269c:	65 9f       	mul	r22, r21
    269e:	f0 0d       	add	r31, r0
    26a0:	99 27       	eor	r25, r25
    26a2:	72 9f       	mul	r23, r18
    26a4:	b0 0d       	add	r27, r0
    26a6:	e1 1d       	adc	r30, r1
    26a8:	f9 1f       	adc	r31, r25
    26aa:	63 9f       	mul	r22, r19
    26ac:	b0 0d       	add	r27, r0
    26ae:	e1 1d       	adc	r30, r1
    26b0:	f9 1f       	adc	r31, r25
    26b2:	bd 01       	movw	r22, r26
    26b4:	cf 01       	movw	r24, r30
    26b6:	11 24       	eor	r1, r1
    26b8:	08 95       	ret

000026ba <__udivmodsi4>:
    26ba:	a1 e2       	ldi	r26, 0x21	; 33
    26bc:	1a 2e       	mov	r1, r26
    26be:	aa 1b       	sub	r26, r26
    26c0:	bb 1b       	sub	r27, r27
    26c2:	fd 01       	movw	r30, r26
    26c4:	0d c0       	rjmp	.+26     	; 0x26e0 <__udivmodsi4_ep>

000026c6 <__udivmodsi4_loop>:
    26c6:	aa 1f       	adc	r26, r26
    26c8:	bb 1f       	adc	r27, r27
    26ca:	ee 1f       	adc	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	a2 17       	cp	r26, r18
    26d0:	b3 07       	cpc	r27, r19
    26d2:	e4 07       	cpc	r30, r20
    26d4:	f5 07       	cpc	r31, r21
    26d6:	20 f0       	brcs	.+8      	; 0x26e0 <__udivmodsi4_ep>
    26d8:	a2 1b       	sub	r26, r18
    26da:	b3 0b       	sbc	r27, r19
    26dc:	e4 0b       	sbc	r30, r20
    26de:	f5 0b       	sbc	r31, r21

000026e0 <__udivmodsi4_ep>:
    26e0:	66 1f       	adc	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 1f       	adc	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	1a 94       	dec	r1
    26ea:	69 f7       	brne	.-38     	; 0x26c6 <__udivmodsi4_loop>
    26ec:	60 95       	com	r22
    26ee:	70 95       	com	r23
    26f0:	80 95       	com	r24
    26f2:	90 95       	com	r25
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	bd 01       	movw	r22, r26
    26fa:	cf 01       	movw	r24, r30
    26fc:	08 95       	ret

000026fe <__prologue_saves__>:
    26fe:	2f 92       	push	r2
    2700:	3f 92       	push	r3
    2702:	4f 92       	push	r4
    2704:	5f 92       	push	r5
    2706:	6f 92       	push	r6
    2708:	7f 92       	push	r7
    270a:	8f 92       	push	r8
    270c:	9f 92       	push	r9
    270e:	af 92       	push	r10
    2710:	bf 92       	push	r11
    2712:	cf 92       	push	r12
    2714:	df 92       	push	r13
    2716:	ef 92       	push	r14
    2718:	ff 92       	push	r15
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	ca 1b       	sub	r28, r26
    2728:	db 0b       	sbc	r29, r27
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	09 94       	ijmp

00002736 <__epilogue_restores__>:
    2736:	2a 88       	ldd	r2, Y+18	; 0x12
    2738:	39 88       	ldd	r3, Y+17	; 0x11
    273a:	48 88       	ldd	r4, Y+16	; 0x10
    273c:	5f 84       	ldd	r5, Y+15	; 0x0f
    273e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2740:	7d 84       	ldd	r7, Y+13	; 0x0d
    2742:	8c 84       	ldd	r8, Y+12	; 0x0c
    2744:	9b 84       	ldd	r9, Y+11	; 0x0b
    2746:	aa 84       	ldd	r10, Y+10	; 0x0a
    2748:	b9 84       	ldd	r11, Y+9	; 0x09
    274a:	c8 84       	ldd	r12, Y+8	; 0x08
    274c:	df 80       	ldd	r13, Y+7	; 0x07
    274e:	ee 80       	ldd	r14, Y+6	; 0x06
    2750:	fd 80       	ldd	r15, Y+5	; 0x05
    2752:	0c 81       	ldd	r16, Y+4	; 0x04
    2754:	1b 81       	ldd	r17, Y+3	; 0x03
    2756:	aa 81       	ldd	r26, Y+2	; 0x02
    2758:	b9 81       	ldd	r27, Y+1	; 0x01
    275a:	ce 0f       	add	r28, r30
    275c:	d1 1d       	adc	r29, r1
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	ed 01       	movw	r28, r26
    276a:	08 95       	ret

0000276c <_exit>:
    276c:	f8 94       	cli

0000276e <__stop_program>:
    276e:	ff cf       	rjmp	.-2      	; 0x276e <__stop_program>
